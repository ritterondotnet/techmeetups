[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar module, exports, s;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/underscorestring_underscore.string/meteor-pre.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Defining this will trick dist/underscore.string.js into putting its exports into module.exports                    // 1\n// Credit to Tim Heckel for this trick - see https://github.com/TimHeckel/meteor-underscore-string                    // 2\nmodule = {};                                                                                                          // 3\n                                                                                                                      // 4\n// This also needed, otherwise above doesn't work???                                                                  // 5\nexports = {};                                                                                                         // 6\n                                                                                                                      // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/underscorestring_underscore.string/dist/underscore.string.js                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\n* Underscore.string                                                                                                   // 2\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>                                                        // 3\n* Underscore.string is freely distributable under the terms of the MIT license.                                       // 4\n* Documentation: https://github.com/epeli/underscore.string                                                           // 5\n* Some code is borrowed from MooTools and Alexandru Marasteanu.                                                       // 6\n* Version '3.3.4'                                                                                                     // 7\n* @preserve                                                                                                           // 8\n*/                                                                                                                    // 9\n                                                                                                                      // 10\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.s = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar trim = require('./trim');                                                                                         // 12\nvar decap = require('./decapitalize');                                                                                // 13\n                                                                                                                      // 14\nmodule.exports = function camelize(str, decapitalize) {                                                               // 15\n  str = trim(str).replace(/[-_\\s]+(.)?/g, function(match, c) {                                                        // 16\n    return c ? c.toUpperCase() : '';                                                                                  // 17\n  });                                                                                                                 // 18\n                                                                                                                      // 19\n  if (decapitalize === true) {                                                                                        // 20\n    return decap(str);                                                                                                // 21\n  } else {                                                                                                            // 22\n    return str;                                                                                                       // 23\n  }                                                                                                                   // 24\n};                                                                                                                    // 25\n                                                                                                                      // 26\n},{\"./decapitalize\":10,\"./trim\":65}],2:[function(require,module,exports){                                             // 27\nvar makeString = require('./helper/makeString');                                                                      // 28\n                                                                                                                      // 29\nmodule.exports = function capitalize(str, lowercaseRest) {                                                            // 30\n  str = makeString(str);                                                                                              // 31\n  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();                                    // 32\n                                                                                                                      // 33\n  return str.charAt(0).toUpperCase() + remainingChars;                                                                // 34\n};                                                                                                                    // 35\n                                                                                                                      // 36\n},{\"./helper/makeString\":20}],3:[function(require,module,exports){                                                    // 37\nvar makeString = require('./helper/makeString');                                                                      // 38\n                                                                                                                      // 39\nmodule.exports = function chars(str) {                                                                                // 40\n  return makeString(str).split('');                                                                                   // 41\n};                                                                                                                    // 42\n                                                                                                                      // 43\n},{\"./helper/makeString\":20}],4:[function(require,module,exports){                                                    // 44\nmodule.exports = function chop(str, step) {                                                                           // 45\n  if (str == null) return [];                                                                                         // 46\n  str = String(str);                                                                                                  // 47\n  step = ~~step;                                                                                                      // 48\n  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];                                          // 49\n};                                                                                                                    // 50\n                                                                                                                      // 51\n},{}],5:[function(require,module,exports){                                                                            // 52\nvar capitalize = require('./capitalize');                                                                             // 53\nvar camelize = require('./camelize');                                                                                 // 54\nvar makeString = require('./helper/makeString');                                                                      // 55\n                                                                                                                      // 56\nmodule.exports = function classify(str) {                                                                             // 57\n  str = makeString(str);                                                                                              // 58\n  return capitalize(camelize(str.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));                                         // 59\n};                                                                                                                    // 60\n                                                                                                                      // 61\n},{\"./camelize\":1,\"./capitalize\":2,\"./helper/makeString\":20}],6:[function(require,module,exports){                    // 62\nvar trim = require('./trim');                                                                                         // 63\n                                                                                                                      // 64\nmodule.exports = function clean(str) {                                                                                // 65\n  return trim(str).replace(/\\s\\s+/g, ' ');                                                                            // 66\n};                                                                                                                    // 67\n                                                                                                                      // 68\n},{\"./trim\":65}],7:[function(require,module,exports){                                                                 // 69\n                                                                                                                      // 70\nvar makeString = require('./helper/makeString');                                                                      // 71\n                                                                                                                      // 72\nvar from  = 'ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž',                                              // 73\n  to    = 'aaaaaaaaaccceeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz';                                                // 74\n                                                                                                                      // 75\nfrom += from.toUpperCase();                                                                                           // 76\nto += to.toUpperCase();                                                                                               // 77\n                                                                                                                      // 78\nto = to.split('');                                                                                                    // 79\n                                                                                                                      // 80\n// for tokens requireing multitoken output                                                                            // 81\nfrom += 'ß';                                                                                                          // 82\nto.push('ss');                                                                                                        // 83\n                                                                                                                      // 84\n                                                                                                                      // 85\nmodule.exports = function cleanDiacritics(str) {                                                                      // 86\n  return makeString(str).replace(/.{1}/g, function(c){                                                                // 87\n    var index = from.indexOf(c);                                                                                      // 88\n    return index === -1 ? c : to[index];                                                                              // 89\n  });                                                                                                                 // 90\n};                                                                                                                    // 91\n                                                                                                                      // 92\n},{\"./helper/makeString\":20}],8:[function(require,module,exports){                                                    // 93\nvar makeString = require('./helper/makeString');                                                                      // 94\n                                                                                                                      // 95\nmodule.exports = function(str, substr) {                                                                              // 96\n  str = makeString(str);                                                                                              // 97\n  substr = makeString(substr);                                                                                        // 98\n                                                                                                                      // 99\n  if (str.length === 0 || substr.length === 0) return 0;                                                              // 100\n                                                                                                                      // 101\n  return str.split(substr).length - 1;                                                                                // 102\n};                                                                                                                    // 103\n                                                                                                                      // 104\n},{\"./helper/makeString\":20}],9:[function(require,module,exports){                                                    // 105\nvar trim = require('./trim');                                                                                         // 106\n                                                                                                                      // 107\nmodule.exports = function dasherize(str) {                                                                            // 108\n  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();                                 // 109\n};                                                                                                                    // 110\n                                                                                                                      // 111\n},{\"./trim\":65}],10:[function(require,module,exports){                                                                // 112\nvar makeString = require('./helper/makeString');                                                                      // 113\n                                                                                                                      // 114\nmodule.exports = function decapitalize(str) {                                                                         // 115\n  str = makeString(str);                                                                                              // 116\n  return str.charAt(0).toLowerCase() + str.slice(1);                                                                  // 117\n};                                                                                                                    // 118\n                                                                                                                      // 119\n},{\"./helper/makeString\":20}],11:[function(require,module,exports){                                                   // 120\nvar makeString = require('./helper/makeString');                                                                      // 121\n                                                                                                                      // 122\nfunction getIndent(str) {                                                                                             // 123\n  var matches = str.match(/^[\\s\\\\t]*/gm);                                                                             // 124\n  var indent = matches[0].length;                                                                                     // 125\n                                                                                                                      // 126\n  for (var i = 1; i < matches.length; i++) {                                                                          // 127\n    indent = Math.min(matches[i].length, indent);                                                                     // 128\n  }                                                                                                                   // 129\n                                                                                                                      // 130\n  return indent;                                                                                                      // 131\n}                                                                                                                     // 132\n                                                                                                                      // 133\nmodule.exports = function dedent(str, pattern) {                                                                      // 134\n  str = makeString(str);                                                                                              // 135\n  var indent = getIndent(str);                                                                                        // 136\n  var reg;                                                                                                            // 137\n                                                                                                                      // 138\n  if (indent === 0) return str;                                                                                       // 139\n                                                                                                                      // 140\n  if (typeof pattern === 'string') {                                                                                  // 141\n    reg = new RegExp('^' + pattern, 'gm');                                                                            // 142\n  } else {                                                                                                            // 143\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');                                                                // 144\n  }                                                                                                                   // 145\n                                                                                                                      // 146\n  return str.replace(reg, '');                                                                                        // 147\n};                                                                                                                    // 148\n                                                                                                                      // 149\n},{\"./helper/makeString\":20}],12:[function(require,module,exports){                                                   // 150\nvar makeString = require('./helper/makeString');                                                                      // 151\nvar toPositive = require('./helper/toPositive');                                                                      // 152\n                                                                                                                      // 153\nmodule.exports = function endsWith(str, ends, position) {                                                             // 154\n  str = makeString(str);                                                                                              // 155\n  ends = '' + ends;                                                                                                   // 156\n  if (typeof position == 'undefined') {                                                                               // 157\n    position = str.length - ends.length;                                                                              // 158\n  } else {                                                                                                            // 159\n    position = Math.min(toPositive(position), str.length) - ends.length;                                              // 160\n  }                                                                                                                   // 161\n  return position >= 0 && str.indexOf(ends, position) === position;                                                   // 162\n};                                                                                                                    // 163\n                                                                                                                      // 164\n},{\"./helper/makeString\":20,\"./helper/toPositive\":22}],13:[function(require,module,exports){                          // 165\nvar makeString = require('./helper/makeString');                                                                      // 166\nvar escapeChars = require('./helper/escapeChars');                                                                    // 167\n                                                                                                                      // 168\nvar regexString = '[';                                                                                                // 169\nfor(var key in escapeChars) {                                                                                         // 170\n  regexString += key;                                                                                                 // 171\n}                                                                                                                     // 172\nregexString += ']';                                                                                                   // 173\n                                                                                                                      // 174\nvar regex = new RegExp( regexString, 'g');                                                                            // 175\n                                                                                                                      // 176\nmodule.exports = function escapeHTML(str) {                                                                           // 177\n                                                                                                                      // 178\n  return makeString(str).replace(regex, function(m) {                                                                 // 179\n    return '&' + escapeChars[m] + ';';                                                                                // 180\n  });                                                                                                                 // 181\n};                                                                                                                    // 182\n                                                                                                                      // 183\n},{\"./helper/escapeChars\":17,\"./helper/makeString\":20}],14:[function(require,module,exports){                         // 184\nmodule.exports = function() {                                                                                         // 185\n  var result = {};                                                                                                    // 186\n                                                                                                                      // 187\n  for (var prop in this) {                                                                                            // 188\n    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join|map|wrap)$/)) continue;           // 189\n    result[prop] = this[prop];                                                                                        // 190\n  }                                                                                                                   // 191\n                                                                                                                      // 192\n  return result;                                                                                                      // 193\n};                                                                                                                    // 194\n                                                                                                                      // 195\n},{}],15:[function(require,module,exports){                                                                           // 196\nvar makeString = require('./makeString');                                                                             // 197\n                                                                                                                      // 198\nmodule.exports = function adjacent(str, direction) {                                                                  // 199\n  str = makeString(str);                                                                                              // 200\n  if (str.length === 0) {                                                                                             // 201\n    return '';                                                                                                        // 202\n  }                                                                                                                   // 203\n  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);                          // 204\n};                                                                                                                    // 205\n                                                                                                                      // 206\n},{\"./makeString\":20}],16:[function(require,module,exports){                                                          // 207\nvar escapeRegExp = require('./escapeRegExp');                                                                         // 208\n                                                                                                                      // 209\nmodule.exports = function defaultToWhiteSpace(characters) {                                                           // 210\n  if (characters == null)                                                                                             // 211\n    return '\\\\s';                                                                                                     // 212\n  else if (characters.source)                                                                                         // 213\n    return characters.source;                                                                                         // 214\n  else                                                                                                                // 215\n    return '[' + escapeRegExp(characters) + ']';                                                                      // 216\n};                                                                                                                    // 217\n                                                                                                                      // 218\n},{\"./escapeRegExp\":18}],17:[function(require,module,exports){                                                        // 219\n/* We're explicitly defining the list of entities we want to escape.                                                  // 220\nnbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.\n                                                                                                                      // 222\n*/                                                                                                                    // 223\nvar escapeChars = {                                                                                                   // 224\n  '¢' : 'cent',                                                                                                       // 225\n  '£' : 'pound',                                                                                                      // 226\n  '¥' : 'yen',                                                                                                        // 227\n  '€': 'euro',                                                                                                        // 228\n  '©' :'copy',                                                                                                        // 229\n  '®' : 'reg',                                                                                                        // 230\n  '<' : 'lt',                                                                                                         // 231\n  '>' : 'gt',                                                                                                         // 232\n  '\"' : 'quot',                                                                                                       // 233\n  '&' : 'amp',                                                                                                        // 234\n  '\\'' : '#39'                                                                                                        // 235\n};                                                                                                                    // 236\n                                                                                                                      // 237\nmodule.exports = escapeChars;                                                                                         // 238\n                                                                                                                      // 239\n},{}],18:[function(require,module,exports){                                                                           // 240\nvar makeString = require('./makeString');                                                                             // 241\n                                                                                                                      // 242\nmodule.exports = function escapeRegExp(str) {                                                                         // 243\n  return makeString(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');                                               // 244\n};                                                                                                                    // 245\n                                                                                                                      // 246\n},{\"./makeString\":20}],19:[function(require,module,exports){                                                          // 247\n/*                                                                                                                    // 248\nWe're explicitly defining the list of entities that might see in escape HTML strings                                  // 249\n*/                                                                                                                    // 250\nvar htmlEntities = {                                                                                                  // 251\n  nbsp: ' ',                                                                                                          // 252\n  cent: '¢',                                                                                                          // 253\n  pound: '£',                                                                                                         // 254\n  yen: '¥',                                                                                                           // 255\n  euro: '€',                                                                                                          // 256\n  copy: '©',                                                                                                          // 257\n  reg: '®',                                                                                                           // 258\n  lt: '<',                                                                                                            // 259\n  gt: '>',                                                                                                            // 260\n  quot: '\"',                                                                                                          // 261\n  amp: '&',                                                                                                           // 262\n  apos: '\\''                                                                                                          // 263\n};                                                                                                                    // 264\n                                                                                                                      // 265\nmodule.exports = htmlEntities;                                                                                        // 266\n                                                                                                                      // 267\n},{}],20:[function(require,module,exports){                                                                           // 268\n/**                                                                                                                   // 269\n * Ensure some object is a coerced to a string                                                                        // 270\n **/                                                                                                                  // 271\nmodule.exports = function makeString(object) {                                                                        // 272\n  if (object == null) return '';                                                                                      // 273\n  return '' + object;                                                                                                 // 274\n};                                                                                                                    // 275\n                                                                                                                      // 276\n},{}],21:[function(require,module,exports){                                                                           // 277\nmodule.exports = function strRepeat(str, qty){                                                                        // 278\n  if (qty < 1) return '';                                                                                             // 279\n  var result = '';                                                                                                    // 280\n  while (qty > 0) {                                                                                                   // 281\n    if (qty & 1) result += str;                                                                                       // 282\n    qty >>= 1, str += str;                                                                                            // 283\n  }                                                                                                                   // 284\n  return result;                                                                                                      // 285\n};                                                                                                                    // 286\n                                                                                                                      // 287\n},{}],22:[function(require,module,exports){                                                                           // 288\nmodule.exports = function toPositive(number) {                                                                        // 289\n  return number < 0 ? 0 : (+number || 0);                                                                             // 290\n};                                                                                                                    // 291\n                                                                                                                      // 292\n},{}],23:[function(require,module,exports){                                                                           // 293\nvar capitalize = require('./capitalize');                                                                             // 294\nvar underscored = require('./underscored');                                                                           // 295\nvar trim = require('./trim');                                                                                         // 296\n                                                                                                                      // 297\nmodule.exports = function humanize(str) {                                                                             // 298\n  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));                                   // 299\n};                                                                                                                    // 300\n                                                                                                                      // 301\n},{\"./capitalize\":2,\"./trim\":65,\"./underscored\":67}],24:[function(require,module,exports){                            // 302\nvar makeString = require('./helper/makeString');                                                                      // 303\n                                                                                                                      // 304\nmodule.exports = function include(str, needle) {                                                                      // 305\n  if (needle === '') return true;                                                                                     // 306\n  return makeString(str).indexOf(needle) !== -1;                                                                      // 307\n};                                                                                                                    // 308\n                                                                                                                      // 309\n},{\"./helper/makeString\":20}],25:[function(require,module,exports){                                                   // 310\n/*                                                                                                                    // 311\n* Underscore.string                                                                                                   // 312\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>                                                        // 313\n* Underscore.string is freely distributable under the terms of the MIT license.                                       // 314\n* Documentation: https://github.com/epeli/underscore.string                                                           // 315\n* Some code is borrowed from MooTools and Alexandru Marasteanu.                                                       // 316\n* Version '3.3.4'                                                                                                     // 317\n* @preserve                                                                                                           // 318\n*/                                                                                                                    // 319\n                                                                                                                      // 320\n'use strict';                                                                                                         // 321\n                                                                                                                      // 322\nfunction s(value) {                                                                                                   // 323\n  /* jshint validthis: true */                                                                                        // 324\n  if (!(this instanceof s)) return new s(value);                                                                      // 325\n  this._wrapped = value;                                                                                              // 326\n}                                                                                                                     // 327\n                                                                                                                      // 328\ns.VERSION = '3.3.4';                                                                                                  // 329\n                                                                                                                      // 330\ns.isBlank          = require('./isBlank');                                                                            // 331\ns.stripTags        = require('./stripTags');                                                                          // 332\ns.capitalize       = require('./capitalize');                                                                         // 333\ns.decapitalize     = require('./decapitalize');                                                                       // 334\ns.chop             = require('./chop');                                                                               // 335\ns.trim             = require('./trim');                                                                               // 336\ns.clean            = require('./clean');                                                                              // 337\ns.cleanDiacritics  = require('./cleanDiacritics');                                                                    // 338\ns.count            = require('./count');                                                                              // 339\ns.chars            = require('./chars');                                                                              // 340\ns.swapCase         = require('./swapCase');                                                                           // 341\ns.escapeHTML       = require('./escapeHTML');                                                                         // 342\ns.unescapeHTML     = require('./unescapeHTML');                                                                       // 343\ns.splice           = require('./splice');                                                                             // 344\ns.insert           = require('./insert');                                                                             // 345\ns.replaceAll       = require('./replaceAll');                                                                         // 346\ns.include          = require('./include');                                                                            // 347\ns.join             = require('./join');                                                                               // 348\ns.lines            = require('./lines');                                                                              // 349\ns.dedent           = require('./dedent');                                                                             // 350\ns.reverse          = require('./reverse');                                                                            // 351\ns.startsWith       = require('./startsWith');                                                                         // 352\ns.endsWith         = require('./endsWith');                                                                           // 353\ns.pred             = require('./pred');                                                                               // 354\ns.succ             = require('./succ');                                                                               // 355\ns.titleize         = require('./titleize');                                                                           // 356\ns.camelize         = require('./camelize');                                                                           // 357\ns.underscored      = require('./underscored');                                                                        // 358\ns.dasherize        = require('./dasherize');                                                                          // 359\ns.classify         = require('./classify');                                                                           // 360\ns.humanize         = require('./humanize');                                                                           // 361\ns.ltrim            = require('./ltrim');                                                                              // 362\ns.rtrim            = require('./rtrim');                                                                              // 363\ns.truncate         = require('./truncate');                                                                           // 364\ns.prune            = require('./prune');                                                                              // 365\ns.words            = require('./words');                                                                              // 366\ns.pad              = require('./pad');                                                                                // 367\ns.lpad             = require('./lpad');                                                                               // 368\ns.rpad             = require('./rpad');                                                                               // 369\ns.lrpad            = require('./lrpad');                                                                              // 370\ns.sprintf          = require('./sprintf');                                                                            // 371\ns.vsprintf         = require('./vsprintf');                                                                           // 372\ns.toNumber         = require('./toNumber');                                                                           // 373\ns.numberFormat     = require('./numberFormat');                                                                       // 374\ns.strRight         = require('./strRight');                                                                           // 375\ns.strRightBack     = require('./strRightBack');                                                                       // 376\ns.strLeft          = require('./strLeft');                                                                            // 377\ns.strLeftBack      = require('./strLeftBack');                                                                        // 378\ns.toSentence       = require('./toSentence');                                                                         // 379\ns.toSentenceSerial = require('./toSentenceSerial');                                                                   // 380\ns.slugify          = require('./slugify');                                                                            // 381\ns.surround         = require('./surround');                                                                           // 382\ns.quote            = require('./quote');                                                                              // 383\ns.unquote          = require('./unquote');                                                                            // 384\ns.repeat           = require('./repeat');                                                                             // 385\ns.naturalCmp       = require('./naturalCmp');                                                                         // 386\ns.levenshtein      = require('./levenshtein');                                                                        // 387\ns.toBoolean        = require('./toBoolean');                                                                          // 388\ns.exports          = require('./exports');                                                                            // 389\ns.escapeRegExp     = require('./helper/escapeRegExp');                                                                // 390\ns.wrap             = require('./wrap');                                                                               // 391\ns.map              = require('./map');                                                                                // 392\n                                                                                                                      // 393\n// Aliases                                                                                                            // 394\ns.strip     = s.trim;                                                                                                 // 395\ns.lstrip    = s.ltrim;                                                                                                // 396\ns.rstrip    = s.rtrim;                                                                                                // 397\ns.center    = s.lrpad;                                                                                                // 398\ns.rjust     = s.lpad;                                                                                                 // 399\ns.ljust     = s.rpad;                                                                                                 // 400\ns.contains  = s.include;                                                                                              // 401\ns.q         = s.quote;                                                                                                // 402\ns.toBool    = s.toBoolean;                                                                                            // 403\ns.camelcase = s.camelize;                                                                                             // 404\ns.mapChars  = s.map;                                                                                                  // 405\n                                                                                                                      // 406\n                                                                                                                      // 407\n// Implement chaining                                                                                                 // 408\ns.prototype = {                                                                                                       // 409\n  value: function value() {                                                                                           // 410\n    return this._wrapped;                                                                                             // 411\n  }                                                                                                                   // 412\n};                                                                                                                    // 413\n                                                                                                                      // 414\nfunction fn2method(key, fn) {                                                                                         // 415\n  if (typeof fn !== 'function') return;                                                                               // 416\n  s.prototype[key] = function() {                                                                                     // 417\n    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));                                         // 418\n    var res = fn.apply(null, args);                                                                                   // 419\n    // if the result is non-string stop the chain and return the value                                                // 420\n    return typeof res === 'string' ? new s(res) : res;                                                                // 421\n  };                                                                                                                  // 422\n}                                                                                                                     // 423\n                                                                                                                      // 424\n// Copy functions to instance methods for chaining                                                                    // 425\nfor (var key in s) fn2method(key, s[key]);                                                                            // 426\n                                                                                                                      // 427\nfn2method('tap', function tap(string, fn) {                                                                           // 428\n  return fn(string);                                                                                                  // 429\n});                                                                                                                   // 430\n                                                                                                                      // 431\nfunction prototype2method(methodName) {                                                                               // 432\n  fn2method(methodName, function(context) {                                                                           // 433\n    var args = Array.prototype.slice.call(arguments, 1);                                                              // 434\n    return String.prototype[methodName].apply(context, args);                                                         // 435\n  });                                                                                                                 // 436\n}                                                                                                                     // 437\n                                                                                                                      // 438\nvar prototypeMethods = [                                                                                              // 439\n  'toUpperCase',                                                                                                      // 440\n  'toLowerCase',                                                                                                      // 441\n  'split',                                                                                                            // 442\n  'replace',                                                                                                          // 443\n  'slice',                                                                                                            // 444\n  'substring',                                                                                                        // 445\n  'substr',                                                                                                           // 446\n  'concat'                                                                                                            // 447\n];                                                                                                                    // 448\n                                                                                                                      // 449\nfor (var method in prototypeMethods) prototype2method(prototypeMethods[method]);                                      // 450\n                                                                                                                      // 451\n                                                                                                                      // 452\nmodule.exports = s;                                                                                                   // 453\n                                                                                                                      // 454\n},{\"./camelize\":1,\"./capitalize\":2,\"./chars\":3,\"./chop\":4,\"./classify\":5,\"./clean\":6,\"./cleanDiacritics\":7,\"./count\":8,\"./dasherize\":9,\"./decapitalize\":10,\"./dedent\":11,\"./endsWith\":12,\"./escapeHTML\":13,\"./exports\":14,\"./helper/escapeRegExp\":18,\"./humanize\":23,\"./include\":24,\"./insert\":26,\"./isBlank\":27,\"./join\":28,\"./levenshtein\":29,\"./lines\":30,\"./lpad\":31,\"./lrpad\":32,\"./ltrim\":33,\"./map\":34,\"./naturalCmp\":35,\"./numberFormat\":38,\"./pad\":39,\"./pred\":40,\"./prune\":41,\"./quote\":42,\"./repeat\":43,\"./replaceAll\":44,\"./reverse\":45,\"./rpad\":46,\"./rtrim\":47,\"./slugify\":48,\"./splice\":49,\"./sprintf\":50,\"./startsWith\":51,\"./strLeft\":52,\"./strLeftBack\":53,\"./strRight\":54,\"./strRightBack\":55,\"./stripTags\":56,\"./succ\":57,\"./surround\":58,\"./swapCase\":59,\"./titleize\":60,\"./toBoolean\":61,\"./toNumber\":62,\"./toSentence\":63,\"./toSentenceSerial\":64,\"./trim\":65,\"./truncate\":66,\"./underscored\":67,\"./unescapeHTML\":68,\"./unquote\":69,\"./vsprintf\":70,\"./words\":71,\"./wrap\":72}],26:[function(require,module,exports){\nvar splice = require('./splice');                                                                                     // 456\n                                                                                                                      // 457\nmodule.exports = function insert(str, i, substr) {                                                                    // 458\n  return splice(str, i, 0, substr);                                                                                   // 459\n};                                                                                                                    // 460\n                                                                                                                      // 461\n},{\"./splice\":49}],27:[function(require,module,exports){                                                              // 462\nvar makeString = require('./helper/makeString');                                                                      // 463\n                                                                                                                      // 464\nmodule.exports = function isBlank(str) {                                                                              // 465\n  return (/^\\s*$/).test(makeString(str));                                                                             // 466\n};                                                                                                                    // 467\n                                                                                                                      // 468\n},{\"./helper/makeString\":20}],28:[function(require,module,exports){                                                   // 469\nvar makeString = require('./helper/makeString');                                                                      // 470\nvar slice = [].slice;                                                                                                 // 471\n                                                                                                                      // 472\nmodule.exports = function join() {                                                                                    // 473\n  var args = slice.call(arguments),                                                                                   // 474\n    separator = args.shift();                                                                                         // 475\n                                                                                                                      // 476\n  return args.join(makeString(separator));                                                                            // 477\n};                                                                                                                    // 478\n                                                                                                                      // 479\n},{\"./helper/makeString\":20}],29:[function(require,module,exports){                                                   // 480\nvar makeString = require('./helper/makeString');                                                                      // 481\n                                                                                                                      // 482\n/**                                                                                                                   // 483\n * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein                                    // 484\n */                                                                                                                   // 485\nmodule.exports = function levenshtein(str1, str2) {                                                                   // 486\n  'use strict';                                                                                                       // 487\n  str1 = makeString(str1);                                                                                            // 488\n  str2 = makeString(str2);                                                                                            // 489\n                                                                                                                      // 490\n  // Short cut cases                                                                                                  // 491\n  if (str1 === str2) return 0;                                                                                        // 492\n  if (!str1 || !str2) return Math.max(str1.length, str2.length);                                                      // 493\n                                                                                                                      // 494\n  // two rows                                                                                                         // 495\n  var prevRow = new Array(str2.length + 1);                                                                           // 496\n                                                                                                                      // 497\n  // initialise previous row                                                                                          // 498\n  for (var i = 0; i < prevRow.length; ++i) {                                                                          // 499\n    prevRow[i] = i;                                                                                                   // 500\n  }                                                                                                                   // 501\n                                                                                                                      // 502\n  // calculate current row distance from previous row                                                                 // 503\n  for (i = 0; i < str1.length; ++i) {                                                                                 // 504\n    var nextCol = i + 1;                                                                                              // 505\n                                                                                                                      // 506\n    for (var j = 0; j < str2.length; ++j) {                                                                           // 507\n      var curCol = nextCol;                                                                                           // 508\n                                                                                                                      // 509\n      // substution                                                                                                   // 510\n      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );                                         // 511\n      // insertion                                                                                                    // 512\n      var tmp = curCol + 1;                                                                                           // 513\n      if (nextCol > tmp) {                                                                                            // 514\n        nextCol = tmp;                                                                                                // 515\n      }                                                                                                               // 516\n      // deletion                                                                                                     // 517\n      tmp = prevRow[j + 1] + 1;                                                                                       // 518\n      if (nextCol > tmp) {                                                                                            // 519\n        nextCol = tmp;                                                                                                // 520\n      }                                                                                                               // 521\n                                                                                                                      // 522\n      // copy current col value into previous (in preparation for next iteration)                                     // 523\n      prevRow[j] = curCol;                                                                                            // 524\n    }                                                                                                                 // 525\n                                                                                                                      // 526\n    // copy last col value into previous (in preparation for next iteration)                                          // 527\n    prevRow[j] = nextCol;                                                                                             // 528\n  }                                                                                                                   // 529\n                                                                                                                      // 530\n  return nextCol;                                                                                                     // 531\n};                                                                                                                    // 532\n                                                                                                                      // 533\n},{\"./helper/makeString\":20}],30:[function(require,module,exports){                                                   // 534\nmodule.exports = function lines(str) {                                                                                // 535\n  if (str == null) return [];                                                                                         // 536\n  return String(str).split(/\\r\\n?|\\n/);                                                                               // 537\n};                                                                                                                    // 538\n                                                                                                                      // 539\n},{}],31:[function(require,module,exports){                                                                           // 540\nvar pad = require('./pad');                                                                                           // 541\n                                                                                                                      // 542\nmodule.exports = function lpad(str, length, padStr) {                                                                 // 543\n  return pad(str, length, padStr);                                                                                    // 544\n};                                                                                                                    // 545\n                                                                                                                      // 546\n},{\"./pad\":39}],32:[function(require,module,exports){                                                                 // 547\nvar pad = require('./pad');                                                                                           // 548\n                                                                                                                      // 549\nmodule.exports = function lrpad(str, length, padStr) {                                                                // 550\n  return pad(str, length, padStr, 'both');                                                                            // 551\n};                                                                                                                    // 552\n                                                                                                                      // 553\n},{\"./pad\":39}],33:[function(require,module,exports){                                                                 // 554\nvar makeString = require('./helper/makeString');                                                                      // 555\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');                                                    // 556\nvar nativeTrimLeft = String.prototype.trimLeft;                                                                       // 557\n                                                                                                                      // 558\nmodule.exports = function ltrim(str, characters) {                                                                    // 559\n  str = makeString(str);                                                                                              // 560\n  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);                                                 // 561\n  characters = defaultToWhiteSpace(characters);                                                                       // 562\n  return str.replace(new RegExp('^' + characters + '+'), '');                                                         // 563\n};                                                                                                                    // 564\n                                                                                                                      // 565\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],34:[function(require,module,exports){                 // 566\nvar makeString = require('./helper/makeString');                                                                      // 567\n                                                                                                                      // 568\nmodule.exports = function(str, callback) {                                                                            // 569\n  str = makeString(str);                                                                                              // 570\n                                                                                                                      // 571\n  if (str.length === 0 || typeof callback !== 'function') return str;                                                 // 572\n                                                                                                                      // 573\n  return str.replace(/./g, callback);                                                                                 // 574\n};                                                                                                                    // 575\n                                                                                                                      // 576\n},{\"./helper/makeString\":20}],35:[function(require,module,exports){                                                   // 577\nmodule.exports = function naturalCmp(str1, str2) {                                                                    // 578\n  if (str1 == str2) return 0;                                                                                         // 579\n  if (!str1) return -1;                                                                                               // 580\n  if (!str2) return 1;                                                                                                // 581\n                                                                                                                      // 582\n  var cmpRegex = /(\\.\\d+|\\d+|\\D+)/g,                                                                                  // 583\n    tokens1 = String(str1).match(cmpRegex),                                                                           // 584\n    tokens2 = String(str2).match(cmpRegex),                                                                           // 585\n    count = Math.min(tokens1.length, tokens2.length);                                                                 // 586\n                                                                                                                      // 587\n  for (var i = 0; i < count; i++) {                                                                                   // 588\n    var a = tokens1[i],                                                                                               // 589\n      b = tokens2[i];                                                                                                 // 590\n                                                                                                                      // 591\n    if (a !== b) {                                                                                                    // 592\n      var num1 = +a;                                                                                                  // 593\n      var num2 = +b;                                                                                                  // 594\n      if (num1 === num1 && num2 === num2) {                                                                           // 595\n        return num1 > num2 ? 1 : -1;                                                                                  // 596\n      }                                                                                                               // 597\n      return a < b ? -1 : 1;                                                                                          // 598\n    }                                                                                                                 // 599\n  }                                                                                                                   // 600\n                                                                                                                      // 601\n  if (tokens1.length != tokens2.length)                                                                               // 602\n    return tokens1.length - tokens2.length;                                                                           // 603\n                                                                                                                      // 604\n  return str1 < str2 ? -1 : 1;                                                                                        // 605\n};                                                                                                                    // 606\n                                                                                                                      // 607\n},{}],36:[function(require,module,exports){                                                                           // 608\n(function(window) {                                                                                                   // 609\n    var re = {                                                                                                        // 610\n        not_string: /[^s]/,                                                                                           // 611\n        number: /[diefg]/,                                                                                            // 612\n        json: /[j]/,                                                                                                  // 613\n        not_json: /[^j]/,                                                                                             // 614\n        text: /^[^\\x25]+/,                                                                                            // 615\n        modulo: /^\\x25{2}/,                                                                                           // 616\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,        // 617\n        key: /^([a-z_][a-z_\\d]*)/i,                                                                                   // 618\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,                                                                          // 619\n        index_access: /^\\[(\\d+)\\]/,                                                                                   // 620\n        sign: /^[\\+\\-]/                                                                                               // 621\n    }                                                                                                                 // 622\n                                                                                                                      // 623\n    function sprintf() {                                                                                              // 624\n        var key = arguments[0], cache = sprintf.cache                                                                 // 625\n        if (!(cache[key] && cache.hasOwnProperty(key))) {                                                             // 626\n            cache[key] = sprintf.parse(key)                                                                           // 627\n        }                                                                                                             // 628\n        return sprintf.format.call(null, cache[key], arguments)                                                       // 629\n    }                                                                                                                 // 630\n                                                                                                                      // 631\n    sprintf.format = function(parse_tree, argv) {                                                                     // 632\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {                                                                           // 634\n            node_type = get_type(parse_tree[i])                                                                       // 635\n            if (node_type === \"string\") {                                                                             // 636\n                output[output.length] = parse_tree[i]                                                                 // 637\n            }                                                                                                         // 638\n            else if (node_type === \"array\") {                                                                         // 639\n                match = parse_tree[i] // convenience purposes only                                                    // 640\n                if (match[2]) { // keyword argument                                                                   // 641\n                    arg = argv[cursor]                                                                                // 642\n                    for (k = 0; k < match[2].length; k++) {                                                           // 643\n                        if (!arg.hasOwnProperty(match[2][k])) {                                                       // 644\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))           // 645\n                        }                                                                                             // 646\n                        arg = arg[match[2][k]]                                                                        // 647\n                    }                                                                                                 // 648\n                }                                                                                                     // 649\n                else if (match[1]) { // positional argument (explicit)                                                // 650\n                    arg = argv[match[1]]                                                                              // 651\n                }                                                                                                     // 652\n                else { // positional argument (implicit)                                                              // 653\n                    arg = argv[cursor++]                                                                              // 654\n                }                                                                                                     // 655\n                                                                                                                      // 656\n                if (get_type(arg) == \"function\") {                                                                    // 657\n                    arg = arg()                                                                                       // 658\n                }                                                                                                     // 659\n                                                                                                                      // 660\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))            // 662\n                }                                                                                                     // 663\n                                                                                                                      // 664\n                if (re.number.test(match[8])) {                                                                       // 665\n                    is_positive = arg >= 0                                                                            // 666\n                }                                                                                                     // 667\n                                                                                                                      // 668\n                switch (match[8]) {                                                                                   // 669\n                    case \"b\":                                                                                         // 670\n                        arg = arg.toString(2)                                                                         // 671\n                    break                                                                                             // 672\n                    case \"c\":                                                                                         // 673\n                        arg = String.fromCharCode(arg)                                                                // 674\n                    break                                                                                             // 675\n                    case \"d\":                                                                                         // 676\n                    case \"i\":                                                                                         // 677\n                        arg = parseInt(arg, 10)                                                                       // 678\n                    break                                                                                             // 679\n                    case \"j\":                                                                                         // 680\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)                            // 681\n                    break                                                                                             // 682\n                    case \"e\":                                                                                         // 683\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()                            // 684\n                    break                                                                                             // 685\n                    case \"f\":                                                                                         // 686\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)                          // 687\n                    break                                                                                             // 688\n                    case \"g\":                                                                                         // 689\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)                      // 690\n                    break                                                                                             // 691\n                    case \"o\":                                                                                         // 692\n                        arg = arg.toString(8)                                                                         // 693\n                    break                                                                                             // 694\n                    case \"s\":                                                                                         // 695\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)                    // 696\n                    break                                                                                             // 697\n                    case \"u\":                                                                                         // 698\n                        arg = arg >>> 0                                                                               // 699\n                    break                                                                                             // 700\n                    case \"x\":                                                                                         // 701\n                        arg = arg.toString(16)                                                                        // 702\n                    break                                                                                             // 703\n                    case \"X\":                                                                                         // 704\n                        arg = arg.toString(16).toUpperCase()                                                          // 705\n                    break                                                                                             // 706\n                }                                                                                                     // 707\n                if (re.json.test(match[8])) {                                                                         // 708\n                    output[output.length] = arg                                                                       // 709\n                }                                                                                                     // 710\n                else {                                                                                                // 711\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {                                     // 712\n                        sign = is_positive ? \"+\" : \"-\"                                                                // 713\n                        arg = arg.toString().replace(re.sign, \"\")                                                     // 714\n                    }                                                                                                 // 715\n                    else {                                                                                            // 716\n                        sign = \"\"                                                                                     // 717\n                    }                                                                                                 // 718\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"                      // 719\n                    pad_length = match[6] - (sign + arg).length                                                       // 720\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"               // 721\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }                                                                                                     // 723\n            }                                                                                                         // 724\n        }                                                                                                             // 725\n        return output.join(\"\")                                                                                        // 726\n    }                                                                                                                 // 727\n                                                                                                                      // 728\n    sprintf.cache = {}                                                                                                // 729\n                                                                                                                      // 730\n    sprintf.parse = function(fmt) {                                                                                   // 731\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0                                                    // 732\n        while (_fmt) {                                                                                                // 733\n            if ((match = re.text.exec(_fmt)) !== null) {                                                              // 734\n                parse_tree[parse_tree.length] = match[0]                                                              // 735\n            }                                                                                                         // 736\n            else if ((match = re.modulo.exec(_fmt)) !== null) {                                                       // 737\n                parse_tree[parse_tree.length] = \"%\"                                                                   // 738\n            }                                                                                                         // 739\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {                                                  // 740\n                if (match[2]) {                                                                                       // 741\n                    arg_names |= 1                                                                                    // 742\n                    var field_list = [], replacement_field = match[2], field_match = []                               // 743\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {                                    // 744\n                        field_list[field_list.length] = field_match[1]                                                // 745\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {     // 746\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {                     // 747\n                                field_list[field_list.length] = field_match[1]                                        // 748\n                            }                                                                                         // 749\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {              // 750\n                                field_list[field_list.length] = field_match[1]                                        // 751\n                            }                                                                                         // 752\n                            else {                                                                                    // 753\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")                 // 754\n                            }                                                                                         // 755\n                        }                                                                                             // 756\n                    }                                                                                                 // 757\n                    else {                                                                                            // 758\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")                         // 759\n                    }                                                                                                 // 760\n                    match[2] = field_list                                                                             // 761\n                }                                                                                                     // 762\n                else {                                                                                                // 763\n                    arg_names |= 2                                                                                    // 764\n                }                                                                                                     // 765\n                if (arg_names === 3) {                                                                                // 766\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")      // 767\n                }                                                                                                     // 768\n                parse_tree[parse_tree.length] = match                                                                 // 769\n            }                                                                                                         // 770\n            else {                                                                                                    // 771\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")                                             // 772\n            }                                                                                                         // 773\n            _fmt = _fmt.substring(match[0].length)                                                                    // 774\n        }                                                                                                             // 775\n        return parse_tree                                                                                             // 776\n    }                                                                                                                 // 777\n                                                                                                                      // 778\n    var vsprintf = function(fmt, argv, _argv) {                                                                       // 779\n        _argv = (argv || []).slice(0)                                                                                 // 780\n        _argv.splice(0, 0, fmt)                                                                                       // 781\n        return sprintf.apply(null, _argv)                                                                             // 782\n    }                                                                                                                 // 783\n                                                                                                                      // 784\n    /**                                                                                                               // 785\n     * helpers                                                                                                        // 786\n     */                                                                                                               // 787\n    function get_type(variable) {                                                                                     // 788\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()                                    // 789\n    }                                                                                                                 // 790\n                                                                                                                      // 791\n    function str_repeat(input, multiplier) {                                                                          // 792\n        return Array(multiplier + 1).join(input)                                                                      // 793\n    }                                                                                                                 // 794\n                                                                                                                      // 795\n    /**                                                                                                               // 796\n     * export to either browser or node.js                                                                            // 797\n     */                                                                                                               // 798\n    if (typeof exports !== \"undefined\") {                                                                             // 799\n        exports.sprintf = sprintf                                                                                     // 800\n        exports.vsprintf = vsprintf                                                                                   // 801\n    }                                                                                                                 // 802\n    else {                                                                                                            // 803\n        window.sprintf = sprintf                                                                                      // 804\n        window.vsprintf = vsprintf                                                                                    // 805\n                                                                                                                      // 806\n        if (typeof define === \"function\" && define.amd) {                                                             // 807\n            define(function() {                                                                                       // 808\n                return {                                                                                              // 809\n                    sprintf: sprintf,                                                                                 // 810\n                    vsprintf: vsprintf                                                                                // 811\n                }                                                                                                     // 812\n            })                                                                                                        // 813\n        }                                                                                                             // 814\n    }                                                                                                                 // 815\n})(typeof window === \"undefined\" ? this : window);                                                                    // 816\n                                                                                                                      // 817\n},{}],37:[function(require,module,exports){                                                                           // 818\n(function (global){                                                                                                   // 819\n                                                                                                                      // 820\n/**                                                                                                                   // 821\n * Module exports.                                                                                                    // 822\n */                                                                                                                   // 823\n                                                                                                                      // 824\nmodule.exports = deprecate;                                                                                           // 825\n                                                                                                                      // 826\n/**                                                                                                                   // 827\n * Mark that a method should not be used.                                                                             // 828\n * Returns a modified function which warns once by default.                                                           // 829\n *                                                                                                                    // 830\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.                                                 // 831\n *                                                                                                                    // 832\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions                                        // 833\n * will throw an Error when invoked.                                                                                  // 834\n *                                                                                                                    // 835\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions                                        // 836\n * will invoke `console.trace()` instead of `console.error()`.                                                        // 837\n *                                                                                                                    // 838\n * @param {Function} fn - the function to deprecate                                                                   // 839\n * @param {String} msg - the string to print to the console when `fn` is invoked                                      // 840\n * @returns {Function} a new \"deprecated\" version of `fn`                                                             // 841\n * @api public                                                                                                        // 842\n */                                                                                                                   // 843\n                                                                                                                      // 844\nfunction deprecate (fn, msg) {                                                                                        // 845\n  if (config('noDeprecation')) {                                                                                      // 846\n    return fn;                                                                                                        // 847\n  }                                                                                                                   // 848\n                                                                                                                      // 849\n  var warned = false;                                                                                                 // 850\n  function deprecated() {                                                                                             // 851\n    if (!warned) {                                                                                                    // 852\n      if (config('throwDeprecation')) {                                                                               // 853\n        throw new Error(msg);                                                                                         // 854\n      } else if (config('traceDeprecation')) {                                                                        // 855\n        console.trace(msg);                                                                                           // 856\n      } else {                                                                                                        // 857\n        console.warn(msg);                                                                                            // 858\n      }                                                                                                               // 859\n      warned = true;                                                                                                  // 860\n    }                                                                                                                 // 861\n    return fn.apply(this, arguments);                                                                                 // 862\n  }                                                                                                                   // 863\n                                                                                                                      // 864\n  return deprecated;                                                                                                  // 865\n}                                                                                                                     // 866\n                                                                                                                      // 867\n/**                                                                                                                   // 868\n * Checks `localStorage` for boolean values for the given `name`.                                                     // 869\n *                                                                                                                    // 870\n * @param {String} name                                                                                               // 871\n * @returns {Boolean}                                                                                                 // 872\n * @api private                                                                                                       // 873\n */                                                                                                                   // 874\n                                                                                                                      // 875\nfunction config (name) {                                                                                              // 876\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes                                    // 877\n  try {                                                                                                               // 878\n    if (!global.localStorage) return false;                                                                           // 879\n  } catch (_) {                                                                                                       // 880\n    return false;                                                                                                     // 881\n  }                                                                                                                   // 882\n  var val = global.localStorage[name];                                                                                // 883\n  if (null == val) return false;                                                                                      // 884\n  return String(val).toLowerCase() === 'true';                                                                        // 885\n}                                                                                                                     // 886\n                                                                                                                      // 887\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],38:[function(require,module,exports){                                                                           // 889\nmodule.exports = function numberFormat(number, dec, dsep, tsep) {                                                     // 890\n  if (isNaN(number) || number == null) return '';                                                                     // 891\n                                                                                                                      // 892\n  number = number.toFixed(~~dec);                                                                                     // 893\n  tsep = typeof tsep == 'string' ? tsep : ',';                                                                        // 894\n                                                                                                                      // 895\n  var parts = number.split('.'),                                                                                      // 896\n    fnums = parts[0],                                                                                                 // 897\n    decimals = parts[1] ? (dsep || '.') + parts[1] : '';                                                              // 898\n                                                                                                                      // 899\n  return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;                                               // 900\n};                                                                                                                    // 901\n                                                                                                                      // 902\n},{}],39:[function(require,module,exports){                                                                           // 903\nvar makeString = require('./helper/makeString');                                                                      // 904\nvar strRepeat = require('./helper/strRepeat');                                                                        // 905\n                                                                                                                      // 906\nmodule.exports = function pad(str, length, padStr, type) {                                                            // 907\n  str = makeString(str);                                                                                              // 908\n  length = ~~length;                                                                                                  // 909\n                                                                                                                      // 910\n  var padlen = 0;                                                                                                     // 911\n                                                                                                                      // 912\n  if (!padStr)                                                                                                        // 913\n    padStr = ' ';                                                                                                     // 914\n  else if (padStr.length > 1)                                                                                         // 915\n    padStr = padStr.charAt(0);                                                                                        // 916\n                                                                                                                      // 917\n  switch (type) {                                                                                                     // 918\n  case 'right':                                                                                                       // 919\n    padlen = length - str.length;                                                                                     // 920\n    return str + strRepeat(padStr, padlen);                                                                           // 921\n  case 'both':                                                                                                        // 922\n    padlen = length - str.length;                                                                                     // 923\n    return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));                // 924\n  default: // 'left'                                                                                                  // 925\n    padlen = length - str.length;                                                                                     // 926\n    return strRepeat(padStr, padlen) + str;                                                                           // 927\n  }                                                                                                                   // 928\n};                                                                                                                    // 929\n                                                                                                                      // 930\n},{\"./helper/makeString\":20,\"./helper/strRepeat\":21}],40:[function(require,module,exports){                           // 931\nvar adjacent = require('./helper/adjacent');                                                                          // 932\n                                                                                                                      // 933\nmodule.exports = function succ(str) {                                                                                 // 934\n  return adjacent(str, -1);                                                                                           // 935\n};                                                                                                                    // 936\n                                                                                                                      // 937\n},{\"./helper/adjacent\":15}],41:[function(require,module,exports){                                                     // 938\n/**                                                                                                                   // 939\n * _s.prune: a more elegant version of truncate                                                                       // 940\n * prune extra chars, never leaving a half-chopped word.                                                              // 941\n * @author github.com/rwz                                                                                             // 942\n */                                                                                                                   // 943\nvar makeString = require('./helper/makeString');                                                                      // 944\nvar rtrim = require('./rtrim');                                                                                       // 945\n                                                                                                                      // 946\nmodule.exports = function prune(str, length, pruneStr) {                                                              // 947\n  str = makeString(str);                                                                                              // 948\n  length = ~~length;                                                                                                  // 949\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';                                                             // 950\n                                                                                                                      // 951\n  if (str.length <= length) return str;                                                                               // 952\n                                                                                                                      // 953\n  var tmpl = function(c) {                                                                                            // 954\n      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';                                                         // 955\n    },                                                                                                                // 956\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'           // 957\n                                                                                                                      // 958\n  if (template.slice(template.length - 2).match(/\\w\\w/))                                                              // 959\n    template = template.replace(/\\s*\\S+$/, '');                                                                       // 960\n  else                                                                                                                // 961\n    template = rtrim(template.slice(0, template.length - 1));                                                         // 962\n                                                                                                                      // 963\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;                  // 964\n};                                                                                                                    // 965\n                                                                                                                      // 966\n},{\"./helper/makeString\":20,\"./rtrim\":47}],42:[function(require,module,exports){                                      // 967\nvar surround = require('./surround');                                                                                 // 968\n                                                                                                                      // 969\nmodule.exports = function quote(str, quoteChar) {                                                                     // 970\n  return surround(str, quoteChar || '\"');                                                                             // 971\n};                                                                                                                    // 972\n                                                                                                                      // 973\n},{\"./surround\":58}],43:[function(require,module,exports){                                                            // 974\nvar makeString = require('./helper/makeString');                                                                      // 975\nvar strRepeat = require('./helper/strRepeat');                                                                        // 976\n                                                                                                                      // 977\nmodule.exports = function repeat(str, qty, separator) {                                                               // 978\n  str = makeString(str);                                                                                              // 979\n                                                                                                                      // 980\n  qty = ~~qty;                                                                                                        // 981\n                                                                                                                      // 982\n  // using faster implementation if separator is not needed;                                                          // 983\n  if (separator == null) return strRepeat(str, qty);                                                                  // 984\n                                                                                                                      // 985\n  // this one is about 300x slower in Google Chrome                                                                   // 986\n  /*eslint no-empty: 0*/                                                                                              // 987\n  for (var repeat = []; qty > 0; repeat[--qty] = str) {}                                                              // 988\n  return repeat.join(separator);                                                                                      // 989\n};                                                                                                                    // 990\n                                                                                                                      // 991\n},{\"./helper/makeString\":20,\"./helper/strRepeat\":21}],44:[function(require,module,exports){                           // 992\nvar makeString = require('./helper/makeString');                                                                      // 993\n                                                                                                                      // 994\nmodule.exports = function replaceAll(str, find, replace, ignorecase) {                                                // 995\n  var flags = (ignorecase === true)?'gi':'g';                                                                         // 996\n  var reg = new RegExp(find, flags);                                                                                  // 997\n                                                                                                                      // 998\n  return makeString(str).replace(reg, replace);                                                                       // 999\n};                                                                                                                    // 1000\n                                                                                                                      // 1001\n},{\"./helper/makeString\":20}],45:[function(require,module,exports){                                                   // 1002\nvar chars = require('./chars');                                                                                       // 1003\n                                                                                                                      // 1004\nmodule.exports = function reverse(str) {                                                                              // 1005\n  return chars(str).reverse().join('');                                                                               // 1006\n};                                                                                                                    // 1007\n                                                                                                                      // 1008\n},{\"./chars\":3}],46:[function(require,module,exports){                                                                // 1009\nvar pad = require('./pad');                                                                                           // 1010\n                                                                                                                      // 1011\nmodule.exports = function rpad(str, length, padStr) {                                                                 // 1012\n  return pad(str, length, padStr, 'right');                                                                           // 1013\n};                                                                                                                    // 1014\n                                                                                                                      // 1015\n},{\"./pad\":39}],47:[function(require,module,exports){                                                                 // 1016\nvar makeString = require('./helper/makeString');                                                                      // 1017\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');                                                    // 1018\nvar nativeTrimRight = String.prototype.trimRight;                                                                     // 1019\n                                                                                                                      // 1020\nmodule.exports = function rtrim(str, characters) {                                                                    // 1021\n  str = makeString(str);                                                                                              // 1022\n  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);                                               // 1023\n  characters = defaultToWhiteSpace(characters);                                                                       // 1024\n  return str.replace(new RegExp(characters + '+$'), '');                                                              // 1025\n};                                                                                                                    // 1026\n                                                                                                                      // 1027\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],48:[function(require,module,exports){                 // 1028\nvar trim = require('./trim');                                                                                         // 1029\nvar dasherize = require('./dasherize');                                                                               // 1030\nvar cleanDiacritics = require('./cleanDiacritics');                                                                   // 1031\n                                                                                                                      // 1032\nmodule.exports = function slugify(str) {                                                                              // 1033\n  return trim(dasherize(cleanDiacritics(str).replace(/[^\\w\\s-]/g, '-').toLowerCase()), '-');                          // 1034\n};                                                                                                                    // 1035\n                                                                                                                      // 1036\n},{\"./cleanDiacritics\":7,\"./dasherize\":9,\"./trim\":65}],49:[function(require,module,exports){                          // 1037\nvar chars = require('./chars');                                                                                       // 1038\n                                                                                                                      // 1039\nmodule.exports = function splice(str, i, howmany, substr) {                                                           // 1040\n  var arr = chars(str);                                                                                               // 1041\n  arr.splice(~~i, ~~howmany, substr);                                                                                 // 1042\n  return arr.join('');                                                                                                // 1043\n};                                                                                                                    // 1044\n                                                                                                                      // 1045\n},{\"./chars\":3}],50:[function(require,module,exports){                                                                // 1046\nvar deprecate = require('util-deprecate');                                                                            // 1047\n                                                                                                                      // 1048\nmodule.exports = deprecate(require('sprintf-js').sprintf,                                                             // 1049\n  'sprintf() will be removed in the next major release, use the sprintf-js package instead.');                        // 1050\n                                                                                                                      // 1051\n},{\"sprintf-js\":36,\"util-deprecate\":37}],51:[function(require,module,exports){                                        // 1052\nvar makeString = require('./helper/makeString');                                                                      // 1053\nvar toPositive = require('./helper/toPositive');                                                                      // 1054\n                                                                                                                      // 1055\nmodule.exports = function startsWith(str, starts, position) {                                                         // 1056\n  str = makeString(str);                                                                                              // 1057\n  starts = '' + starts;                                                                                               // 1058\n  position = position == null ? 0 : Math.min(toPositive(position), str.length);                                       // 1059\n  return str.lastIndexOf(starts, position) === position;                                                              // 1060\n};                                                                                                                    // 1061\n                                                                                                                      // 1062\n},{\"./helper/makeString\":20,\"./helper/toPositive\":22}],52:[function(require,module,exports){                          // 1063\nvar makeString = require('./helper/makeString');                                                                      // 1064\n                                                                                                                      // 1065\nmodule.exports = function strLeft(str, sep) {                                                                         // 1066\n  str = makeString(str);                                                                                              // 1067\n  sep = makeString(sep);                                                                                              // 1068\n  var pos = !sep ? -1 : str.indexOf(sep);                                                                             // 1069\n  return~ pos ? str.slice(0, pos) : str;                                                                              // 1070\n};                                                                                                                    // 1071\n                                                                                                                      // 1072\n},{\"./helper/makeString\":20}],53:[function(require,module,exports){                                                   // 1073\nvar makeString = require('./helper/makeString');                                                                      // 1074\n                                                                                                                      // 1075\nmodule.exports = function strLeftBack(str, sep) {                                                                     // 1076\n  str = makeString(str);                                                                                              // 1077\n  sep = makeString(sep);                                                                                              // 1078\n  var pos = str.lastIndexOf(sep);                                                                                     // 1079\n  return~ pos ? str.slice(0, pos) : str;                                                                              // 1080\n};                                                                                                                    // 1081\n                                                                                                                      // 1082\n},{\"./helper/makeString\":20}],54:[function(require,module,exports){                                                   // 1083\nvar makeString = require('./helper/makeString');                                                                      // 1084\n                                                                                                                      // 1085\nmodule.exports = function strRight(str, sep) {                                                                        // 1086\n  str = makeString(str);                                                                                              // 1087\n  sep = makeString(sep);                                                                                              // 1088\n  var pos = !sep ? -1 : str.indexOf(sep);                                                                             // 1089\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;                                                        // 1090\n};                                                                                                                    // 1091\n                                                                                                                      // 1092\n},{\"./helper/makeString\":20}],55:[function(require,module,exports){                                                   // 1093\nvar makeString = require('./helper/makeString');                                                                      // 1094\n                                                                                                                      // 1095\nmodule.exports = function strRightBack(str, sep) {                                                                    // 1096\n  str = makeString(str);                                                                                              // 1097\n  sep = makeString(sep);                                                                                              // 1098\n  var pos = !sep ? -1 : str.lastIndexOf(sep);                                                                         // 1099\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;                                                        // 1100\n};                                                                                                                    // 1101\n                                                                                                                      // 1102\n},{\"./helper/makeString\":20}],56:[function(require,module,exports){                                                   // 1103\nvar makeString = require('./helper/makeString');                                                                      // 1104\n                                                                                                                      // 1105\nmodule.exports = function stripTags(str) {                                                                            // 1106\n  return makeString(str).replace(/<\\/?[^>]+>/g, '');                                                                  // 1107\n};                                                                                                                    // 1108\n                                                                                                                      // 1109\n},{\"./helper/makeString\":20}],57:[function(require,module,exports){                                                   // 1110\nvar adjacent = require('./helper/adjacent');                                                                          // 1111\n                                                                                                                      // 1112\nmodule.exports = function succ(str) {                                                                                 // 1113\n  return adjacent(str, 1);                                                                                            // 1114\n};                                                                                                                    // 1115\n                                                                                                                      // 1116\n},{\"./helper/adjacent\":15}],58:[function(require,module,exports){                                                     // 1117\nmodule.exports = function surround(str, wrapper) {                                                                    // 1118\n  return [wrapper, str, wrapper].join('');                                                                            // 1119\n};                                                                                                                    // 1120\n                                                                                                                      // 1121\n},{}],59:[function(require,module,exports){                                                                           // 1122\nvar makeString = require('./helper/makeString');                                                                      // 1123\n                                                                                                                      // 1124\nmodule.exports = function swapCase(str) {                                                                             // 1125\n  return makeString(str).replace(/\\S/g, function(c) {                                                                 // 1126\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();                                                 // 1127\n  });                                                                                                                 // 1128\n};                                                                                                                    // 1129\n                                                                                                                      // 1130\n},{\"./helper/makeString\":20}],60:[function(require,module,exports){                                                   // 1131\nvar makeString = require('./helper/makeString');                                                                      // 1132\n                                                                                                                      // 1133\nmodule.exports = function titleize(str) {                                                                             // 1134\n  return makeString(str).toLowerCase().replace(/(?:^|\\s|-)\\S/g, function(c) {                                         // 1135\n    return c.toUpperCase();                                                                                           // 1136\n  });                                                                                                                 // 1137\n};                                                                                                                    // 1138\n                                                                                                                      // 1139\n},{\"./helper/makeString\":20}],61:[function(require,module,exports){                                                   // 1140\nvar trim = require('./trim');                                                                                         // 1141\n                                                                                                                      // 1142\nfunction boolMatch(s, matchers) {                                                                                     // 1143\n  var i, matcher, down = s.toLowerCase();                                                                             // 1144\n  matchers = [].concat(matchers);                                                                                     // 1145\n  for (i = 0; i < matchers.length; i += 1) {                                                                          // 1146\n    matcher = matchers[i];                                                                                            // 1147\n    if (!matcher) continue;                                                                                           // 1148\n    if (matcher.test && matcher.test(s)) return true;                                                                 // 1149\n    if (matcher.toLowerCase() === down) return true;                                                                  // 1150\n  }                                                                                                                   // 1151\n}                                                                                                                     // 1152\n                                                                                                                      // 1153\nmodule.exports = function toBoolean(str, trueValues, falseValues) {                                                   // 1154\n  if (typeof str === 'number') str = '' + str;                                                                        // 1155\n  if (typeof str !== 'string') return !!str;                                                                          // 1156\n  str = trim(str);                                                                                                    // 1157\n  if (boolMatch(str, trueValues || ['true', '1'])) return true;                                                       // 1158\n  if (boolMatch(str, falseValues || ['false', '0'])) return false;                                                    // 1159\n};                                                                                                                    // 1160\n                                                                                                                      // 1161\n},{\"./trim\":65}],62:[function(require,module,exports){                                                                // 1162\nmodule.exports = function toNumber(num, precision) {                                                                  // 1163\n  if (num == null) return 0;                                                                                          // 1164\n  var factor = Math.pow(10, isFinite(precision) ? precision : 0);                                                     // 1165\n  return Math.round(num * factor) / factor;                                                                           // 1166\n};                                                                                                                    // 1167\n                                                                                                                      // 1168\n},{}],63:[function(require,module,exports){                                                                           // 1169\nvar rtrim = require('./rtrim');                                                                                       // 1170\n                                                                                                                      // 1171\nmodule.exports = function toSentence(array, separator, lastSeparator, serial) {                                       // 1172\n  separator = separator || ', ';                                                                                      // 1173\n  lastSeparator = lastSeparator || ' and ';                                                                           // 1174\n  var a = array.slice(),                                                                                              // 1175\n    lastMember = a.pop();                                                                                             // 1176\n                                                                                                                      // 1177\n  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;                                   // 1178\n                                                                                                                      // 1179\n  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;                                      // 1180\n};                                                                                                                    // 1181\n                                                                                                                      // 1182\n},{\"./rtrim\":47}],64:[function(require,module,exports){                                                               // 1183\nvar toSentence = require('./toSentence');                                                                             // 1184\n                                                                                                                      // 1185\nmodule.exports = function toSentenceSerial(array, sep, lastSep) {                                                     // 1186\n  return toSentence(array, sep, lastSep, true);                                                                       // 1187\n};                                                                                                                    // 1188\n                                                                                                                      // 1189\n},{\"./toSentence\":63}],65:[function(require,module,exports){                                                          // 1190\nvar makeString = require('./helper/makeString');                                                                      // 1191\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');                                                    // 1192\nvar nativeTrim = String.prototype.trim;                                                                               // 1193\n                                                                                                                      // 1194\nmodule.exports = function trim(str, characters) {                                                                     // 1195\n  str = makeString(str);                                                                                              // 1196\n  if (!characters && nativeTrim) return nativeTrim.call(str);                                                         // 1197\n  characters = defaultToWhiteSpace(characters);                                                                       // 1198\n  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');                               // 1199\n};                                                                                                                    // 1200\n                                                                                                                      // 1201\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],66:[function(require,module,exports){                 // 1202\nvar makeString = require('./helper/makeString');                                                                      // 1203\n                                                                                                                      // 1204\nmodule.exports = function truncate(str, length, truncateStr) {                                                        // 1205\n  str = makeString(str);                                                                                              // 1206\n  truncateStr = truncateStr || '...';                                                                                 // 1207\n  length = ~~length;                                                                                                  // 1208\n  return str.length > length ? str.slice(0, length) + truncateStr : str;                                              // 1209\n};                                                                                                                    // 1210\n                                                                                                                      // 1211\n},{\"./helper/makeString\":20}],67:[function(require,module,exports){                                                   // 1212\nvar trim = require('./trim');                                                                                         // 1213\n                                                                                                                      // 1214\nmodule.exports = function underscored(str) {                                                                          // 1215\n  return trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();                      // 1216\n};                                                                                                                    // 1217\n                                                                                                                      // 1218\n},{\"./trim\":65}],68:[function(require,module,exports){                                                                // 1219\nvar makeString = require('./helper/makeString');                                                                      // 1220\nvar htmlEntities = require('./helper/htmlEntities');                                                                  // 1221\n                                                                                                                      // 1222\nmodule.exports = function unescapeHTML(str) {                                                                         // 1223\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {                                        // 1224\n    var match;                                                                                                        // 1225\n                                                                                                                      // 1226\n    if (entityCode in htmlEntities) {                                                                                 // 1227\n      return htmlEntities[entityCode];                                                                                // 1228\n    /*eslint no-cond-assign: 0*/                                                                                      // 1229\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {                                                       // 1230\n      return String.fromCharCode(parseInt(match[1], 16));                                                             // 1231\n    /*eslint no-cond-assign: 0*/                                                                                      // 1232\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {                                                                // 1233\n      return String.fromCharCode(~~match[1]);                                                                         // 1234\n    } else {                                                                                                          // 1235\n      return entity;                                                                                                  // 1236\n    }                                                                                                                 // 1237\n  });                                                                                                                 // 1238\n};                                                                                                                    // 1239\n                                                                                                                      // 1240\n},{\"./helper/htmlEntities\":19,\"./helper/makeString\":20}],69:[function(require,module,exports){                        // 1241\nmodule.exports = function unquote(str, quoteChar) {                                                                   // 1242\n  quoteChar = quoteChar || '\"';                                                                                       // 1243\n  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)                                                      // 1244\n    return str.slice(1, str.length - 1);                                                                              // 1245\n  else return str;                                                                                                    // 1246\n};                                                                                                                    // 1247\n                                                                                                                      // 1248\n},{}],70:[function(require,module,exports){                                                                           // 1249\nvar deprecate = require('util-deprecate');                                                                            // 1250\n                                                                                                                      // 1251\nmodule.exports = deprecate(require('sprintf-js').vsprintf,                                                            // 1252\n  'vsprintf() will be removed in the next major release, use the sprintf-js package instead.');                       // 1253\n                                                                                                                      // 1254\n},{\"sprintf-js\":36,\"util-deprecate\":37}],71:[function(require,module,exports){                                        // 1255\nvar isBlank = require('./isBlank');                                                                                   // 1256\nvar trim = require('./trim');                                                                                         // 1257\n                                                                                                                      // 1258\nmodule.exports = function words(str, delimiter) {                                                                     // 1259\n  if (isBlank(str)) return [];                                                                                        // 1260\n  return trim(str, delimiter).split(delimiter || /\\s+/);                                                              // 1261\n};                                                                                                                    // 1262\n                                                                                                                      // 1263\n},{\"./isBlank\":27,\"./trim\":65}],72:[function(require,module,exports){                                                 // 1264\n// Wrap                                                                                                               // 1265\n// wraps a string by a certain width                                                                                  // 1266\n                                                                                                                      // 1267\nvar makeString = require('./helper/makeString');                                                                      // 1268\n                                                                                                                      // 1269\nmodule.exports = function wrap(str, options){                                                                         // 1270\n  str = makeString(str);                                                                                              // 1271\n                                                                                                                      // 1272\n  options = options || {};                                                                                            // 1273\n                                                                                                                      // 1274\n  var width = options.width || 75;                                                                                    // 1275\n  var seperator = options.seperator || '\\n';                                                                          // 1276\n  var cut = options.cut || false;                                                                                     // 1277\n  var preserveSpaces = options.preserveSpaces || false;                                                               // 1278\n  var trailingSpaces = options.trailingSpaces || false;                                                               // 1279\n                                                                                                                      // 1280\n  var result;                                                                                                         // 1281\n                                                                                                                      // 1282\n  if(width <= 0){                                                                                                     // 1283\n    return str;                                                                                                       // 1284\n  }                                                                                                                   // 1285\n                                                                                                                      // 1286\n  else if(!cut){                                                                                                      // 1287\n                                                                                                                      // 1288\n    var words = str.split(' ');                                                                                       // 1289\n    var current_column = 0;                                                                                           // 1290\n    result = '';                                                                                                      // 1291\n                                                                                                                      // 1292\n    while(words.length > 0){                                                                                          // 1293\n                                                                                                                      // 1294\n      // if adding a space and the next word would cause this line to be longer than width...                         // 1295\n      if(1 + words[0].length + current_column > width){                                                               // 1296\n        //start a new line if this line is not already empty                                                          // 1297\n        if(current_column > 0){                                                                                       // 1298\n          // add a space at the end of the line is preserveSpaces is true                                             // 1299\n          if (preserveSpaces){                                                                                        // 1300\n            result += ' ';                                                                                            // 1301\n            current_column++;                                                                                         // 1302\n          }                                                                                                           // 1303\n          // fill the rest of the line with spaces if trailingSpaces option is true                                   // 1304\n          else if(trailingSpaces){                                                                                    // 1305\n            while(current_column < width){                                                                            // 1306\n              result += ' ';                                                                                          // 1307\n              current_column++;                                                                                       // 1308\n            }                                                                                                         // 1309\n          }                                                                                                           // 1310\n          //start new line                                                                                            // 1311\n          result += seperator;                                                                                        // 1312\n          current_column = 0;                                                                                         // 1313\n        }                                                                                                             // 1314\n      }                                                                                                               // 1315\n                                                                                                                      // 1316\n      // if not at the begining of the line, add a space in front of the word                                         // 1317\n      if(current_column > 0){                                                                                         // 1318\n        result += ' ';                                                                                                // 1319\n        current_column++;                                                                                             // 1320\n      }                                                                                                               // 1321\n                                                                                                                      // 1322\n      // tack on the next word, update current column, a pop words array                                              // 1323\n      result += words[0];                                                                                             // 1324\n      current_column += words[0].length;                                                                              // 1325\n      words.shift();                                                                                                  // 1326\n                                                                                                                      // 1327\n    }                                                                                                                 // 1328\n                                                                                                                      // 1329\n    // fill the rest of the line with spaces if trailingSpaces option is true                                         // 1330\n    if(trailingSpaces){                                                                                               // 1331\n      while(current_column < width){                                                                                  // 1332\n        result += ' ';                                                                                                // 1333\n        current_column++;                                                                                             // 1334\n      }                                                                                                               // 1335\n    }                                                                                                                 // 1336\n                                                                                                                      // 1337\n    return result;                                                                                                    // 1338\n                                                                                                                      // 1339\n  }                                                                                                                   // 1340\n                                                                                                                      // 1341\n  else {                                                                                                              // 1342\n                                                                                                                      // 1343\n    var index = 0;                                                                                                    // 1344\n    result = '';                                                                                                      // 1345\n                                                                                                                      // 1346\n    // walk through each character and add seperators where appropriate                                               // 1347\n    while(index < str.length){                                                                                        // 1348\n      if(index % width == 0 && index > 0){                                                                            // 1349\n        result += seperator;                                                                                          // 1350\n      }                                                                                                               // 1351\n      result += str.charAt(index);                                                                                    // 1352\n      index++;                                                                                                        // 1353\n    }                                                                                                                 // 1354\n                                                                                                                      // 1355\n    // fill the rest of the line with spaces if trailingSpaces option is true                                         // 1356\n    if(trailingSpaces){                                                                                               // 1357\n      while(index % width > 0){                                                                                       // 1358\n        result += ' ';                                                                                                // 1359\n        index++;                                                                                                      // 1360\n      }                                                                                                               // 1361\n    }                                                                                                                 // 1362\n                                                                                                                      // 1363\n    return result;                                                                                                    // 1364\n  }                                                                                                                   // 1365\n};                                                                                                                    // 1366\n                                                                                                                      // 1367\n},{\"./helper/makeString\":20}]},{},[25])(25)                                                                           // 1368\n});                                                                                                                   // 1369\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/underscorestring_underscore.string/meteor-post.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// s will be picked up by Meteor and exported                                                                         // 1\ns = module.exports;                                                                                                   // 2\n                                                                                                                      // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['underscorestring:underscore.string'] = {\n  s: s\n};\n\n})();\n","servePath":"/packages/underscorestring_underscore.string.js","sourceMap":{"version":3,"sources":["/packages/underscorestring_underscore.string/meteor-pre.js","/packages/underscorestring_underscore.string/dist/underscore.string.js","/packages/underscorestring_underscore.string/meteor-post.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACx1CA;AACA;AACA,0H","file":"/packages/underscorestring_underscore.string.js","sourcesContent":["// Defining this will trick dist/underscore.string.js into putting its exports into module.exports\n// Credit to Tim Heckel for this trick - see https://github.com/TimHeckel/meteor-underscore-string\nmodule = {};\n\n// This also needed, otherwise above doesn't work???\nexports = {};\n","/*\n* Underscore.string\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n* Underscore.string is freely distributable under the terms of the MIT license.\n* Documentation: https://github.com/epeli/underscore.string\n* Some code is borrowed from MooTools and Alexandru Marasteanu.\n* Version '3.3.4'\n* @preserve\n*/\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.s = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar trim = require('./trim');\nvar decap = require('./decapitalize');\n\nmodule.exports = function camelize(str, decapitalize) {\n  str = trim(str).replace(/[-_\\s]+(.)?/g, function(match, c) {\n    return c ? c.toUpperCase() : '';\n  });\n\n  if (decapitalize === true) {\n    return decap(str);\n  } else {\n    return str;\n  }\n};\n\n},{\"./decapitalize\":10,\"./trim\":65}],2:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function capitalize(str, lowercaseRest) {\n  str = makeString(str);\n  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();\n\n  return str.charAt(0).toUpperCase() + remainingChars;\n};\n\n},{\"./helper/makeString\":20}],3:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function chars(str) {\n  return makeString(str).split('');\n};\n\n},{\"./helper/makeString\":20}],4:[function(require,module,exports){\nmodule.exports = function chop(str, step) {\n  if (str == null) return [];\n  str = String(str);\n  step = ~~step;\n  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\n};\n\n},{}],5:[function(require,module,exports){\nvar capitalize = require('./capitalize');\nvar camelize = require('./camelize');\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function classify(str) {\n  str = makeString(str);\n  return capitalize(camelize(str.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));\n};\n\n},{\"./camelize\":1,\"./capitalize\":2,\"./helper/makeString\":20}],6:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function clean(str) {\n  return trim(str).replace(/\\s\\s+/g, ' ');\n};\n\n},{\"./trim\":65}],7:[function(require,module,exports){\n\nvar makeString = require('./helper/makeString');\n\nvar from  = 'ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž',\n  to    = 'aaaaaaaaaccceeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz';\n\nfrom += from.toUpperCase();\nto += to.toUpperCase();\n\nto = to.split('');\n\n// for tokens requireing multitoken output\nfrom += 'ß';\nto.push('ss');\n\n\nmodule.exports = function cleanDiacritics(str) {\n  return makeString(str).replace(/.{1}/g, function(c){\n    var index = from.indexOf(c);\n    return index === -1 ? c : to[index];\n  });\n};\n\n},{\"./helper/makeString\":20}],8:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function(str, substr) {\n  str = makeString(str);\n  substr = makeString(substr);\n\n  if (str.length === 0 || substr.length === 0) return 0;\n  \n  return str.split(substr).length - 1;\n};\n\n},{\"./helper/makeString\":20}],9:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function dasherize(str) {\n  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n};\n\n},{\"./trim\":65}],10:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function decapitalize(str) {\n  str = makeString(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n};\n\n},{\"./helper/makeString\":20}],11:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nfunction getIndent(str) {\n  var matches = str.match(/^[\\s\\\\t]*/gm);\n  var indent = matches[0].length;\n  \n  for (var i = 1; i < matches.length; i++) {\n    indent = Math.min(matches[i].length, indent);\n  }\n\n  return indent;\n}\n\nmodule.exports = function dedent(str, pattern) {\n  str = makeString(str);\n  var indent = getIndent(str);\n  var reg;\n\n  if (indent === 0) return str;\n\n  if (typeof pattern === 'string') {\n    reg = new RegExp('^' + pattern, 'gm');\n  } else {\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  }\n\n  return str.replace(reg, '');\n};\n\n},{\"./helper/makeString\":20}],12:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar toPositive = require('./helper/toPositive');\n\nmodule.exports = function endsWith(str, ends, position) {\n  str = makeString(str);\n  ends = '' + ends;\n  if (typeof position == 'undefined') {\n    position = str.length - ends.length;\n  } else {\n    position = Math.min(toPositive(position), str.length) - ends.length;\n  }\n  return position >= 0 && str.indexOf(ends, position) === position;\n};\n\n},{\"./helper/makeString\":20,\"./helper/toPositive\":22}],13:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar escapeChars = require('./helper/escapeChars');\n\nvar regexString = '[';\nfor(var key in escapeChars) {\n  regexString += key;\n}\nregexString += ']';\n\nvar regex = new RegExp( regexString, 'g');\n\nmodule.exports = function escapeHTML(str) {\n\n  return makeString(str).replace(regex, function(m) {\n    return '&' + escapeChars[m] + ';';\n  });\n};\n\n},{\"./helper/escapeChars\":17,\"./helper/makeString\":20}],14:[function(require,module,exports){\nmodule.exports = function() {\n  var result = {};\n\n  for (var prop in this) {\n    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join|map|wrap)$/)) continue;\n    result[prop] = this[prop];\n  }\n\n  return result;\n};\n\n},{}],15:[function(require,module,exports){\nvar makeString = require('./makeString');\n\nmodule.exports = function adjacent(str, direction) {\n  str = makeString(str);\n  if (str.length === 0) {\n    return '';\n  }\n  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);\n};\n\n},{\"./makeString\":20}],16:[function(require,module,exports){\nvar escapeRegExp = require('./escapeRegExp');\n\nmodule.exports = function defaultToWhiteSpace(characters) {\n  if (characters == null)\n    return '\\\\s';\n  else if (characters.source)\n    return characters.source;\n  else\n    return '[' + escapeRegExp(characters) + ']';\n};\n\n},{\"./escapeRegExp\":18}],17:[function(require,module,exports){\n/* We're explicitly defining the list of entities we want to escape.\nnbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.\n\n*/\nvar escapeChars = {\n  '¢' : 'cent',\n  '£' : 'pound',\n  '¥' : 'yen',\n  '€': 'euro',\n  '©' :'copy',\n  '®' : 'reg',\n  '<' : 'lt',\n  '>' : 'gt',\n  '\"' : 'quot',\n  '&' : 'amp',\n  '\\'' : '#39'\n};\n\nmodule.exports = escapeChars;\n\n},{}],18:[function(require,module,exports){\nvar makeString = require('./makeString');\n\nmodule.exports = function escapeRegExp(str) {\n  return makeString(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n};\n\n},{\"./makeString\":20}],19:[function(require,module,exports){\n/*\nWe're explicitly defining the list of entities that might see in escape HTML strings\n*/\nvar htmlEntities = {\n  nbsp: ' ',\n  cent: '¢',\n  pound: '£',\n  yen: '¥',\n  euro: '€',\n  copy: '©',\n  reg: '®',\n  lt: '<',\n  gt: '>',\n  quot: '\"',\n  amp: '&',\n  apos: '\\''\n};\n\nmodule.exports = htmlEntities;\n\n},{}],20:[function(require,module,exports){\n/**\n * Ensure some object is a coerced to a string\n **/\nmodule.exports = function makeString(object) {\n  if (object == null) return '';\n  return '' + object;\n};\n\n},{}],21:[function(require,module,exports){\nmodule.exports = function strRepeat(str, qty){\n  if (qty < 1) return '';\n  var result = '';\n  while (qty > 0) {\n    if (qty & 1) result += str;\n    qty >>= 1, str += str;\n  }\n  return result;\n};\n\n},{}],22:[function(require,module,exports){\nmodule.exports = function toPositive(number) {\n  return number < 0 ? 0 : (+number || 0);\n};\n\n},{}],23:[function(require,module,exports){\nvar capitalize = require('./capitalize');\nvar underscored = require('./underscored');\nvar trim = require('./trim');\n\nmodule.exports = function humanize(str) {\n  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));\n};\n\n},{\"./capitalize\":2,\"./trim\":65,\"./underscored\":67}],24:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function include(str, needle) {\n  if (needle === '') return true;\n  return makeString(str).indexOf(needle) !== -1;\n};\n\n},{\"./helper/makeString\":20}],25:[function(require,module,exports){\n/*\n* Underscore.string\n* (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n* Underscore.string is freely distributable under the terms of the MIT license.\n* Documentation: https://github.com/epeli/underscore.string\n* Some code is borrowed from MooTools and Alexandru Marasteanu.\n* Version '3.3.4'\n* @preserve\n*/\n\n'use strict';\n\nfunction s(value) {\n  /* jshint validthis: true */\n  if (!(this instanceof s)) return new s(value);\n  this._wrapped = value;\n}\n\ns.VERSION = '3.3.4';\n\ns.isBlank          = require('./isBlank');\ns.stripTags        = require('./stripTags');\ns.capitalize       = require('./capitalize');\ns.decapitalize     = require('./decapitalize');\ns.chop             = require('./chop');\ns.trim             = require('./trim');\ns.clean            = require('./clean');\ns.cleanDiacritics  = require('./cleanDiacritics');\ns.count            = require('./count');\ns.chars            = require('./chars');\ns.swapCase         = require('./swapCase');\ns.escapeHTML       = require('./escapeHTML');\ns.unescapeHTML     = require('./unescapeHTML');\ns.splice           = require('./splice');\ns.insert           = require('./insert');\ns.replaceAll       = require('./replaceAll');\ns.include          = require('./include');\ns.join             = require('./join');\ns.lines            = require('./lines');\ns.dedent           = require('./dedent');\ns.reverse          = require('./reverse');\ns.startsWith       = require('./startsWith');\ns.endsWith         = require('./endsWith');\ns.pred             = require('./pred');\ns.succ             = require('./succ');\ns.titleize         = require('./titleize');\ns.camelize         = require('./camelize');\ns.underscored      = require('./underscored');\ns.dasherize        = require('./dasherize');\ns.classify         = require('./classify');\ns.humanize         = require('./humanize');\ns.ltrim            = require('./ltrim');\ns.rtrim            = require('./rtrim');\ns.truncate         = require('./truncate');\ns.prune            = require('./prune');\ns.words            = require('./words');\ns.pad              = require('./pad');\ns.lpad             = require('./lpad');\ns.rpad             = require('./rpad');\ns.lrpad            = require('./lrpad');\ns.sprintf          = require('./sprintf');\ns.vsprintf         = require('./vsprintf');\ns.toNumber         = require('./toNumber');\ns.numberFormat     = require('./numberFormat');\ns.strRight         = require('./strRight');\ns.strRightBack     = require('./strRightBack');\ns.strLeft          = require('./strLeft');\ns.strLeftBack      = require('./strLeftBack');\ns.toSentence       = require('./toSentence');\ns.toSentenceSerial = require('./toSentenceSerial');\ns.slugify          = require('./slugify');\ns.surround         = require('./surround');\ns.quote            = require('./quote');\ns.unquote          = require('./unquote');\ns.repeat           = require('./repeat');\ns.naturalCmp       = require('./naturalCmp');\ns.levenshtein      = require('./levenshtein');\ns.toBoolean        = require('./toBoolean');\ns.exports          = require('./exports');\ns.escapeRegExp     = require('./helper/escapeRegExp');\ns.wrap             = require('./wrap');\ns.map              = require('./map');\n\n// Aliases\ns.strip     = s.trim;\ns.lstrip    = s.ltrim;\ns.rstrip    = s.rtrim;\ns.center    = s.lrpad;\ns.rjust     = s.lpad;\ns.ljust     = s.rpad;\ns.contains  = s.include;\ns.q         = s.quote;\ns.toBool    = s.toBoolean;\ns.camelcase = s.camelize;\ns.mapChars  = s.map;\n\n\n// Implement chaining\ns.prototype = {\n  value: function value() {\n    return this._wrapped;\n  }\n};\n\nfunction fn2method(key, fn) {\n  if (typeof fn !== 'function') return;\n  s.prototype[key] = function() {\n    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));\n    var res = fn.apply(null, args);\n    // if the result is non-string stop the chain and return the value\n    return typeof res === 'string' ? new s(res) : res;\n  };\n}\n\n// Copy functions to instance methods for chaining\nfor (var key in s) fn2method(key, s[key]);\n\nfn2method('tap', function tap(string, fn) {\n  return fn(string);\n});\n\nfunction prototype2method(methodName) {\n  fn2method(methodName, function(context) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return String.prototype[methodName].apply(context, args);\n  });\n}\n\nvar prototypeMethods = [\n  'toUpperCase',\n  'toLowerCase',\n  'split',\n  'replace',\n  'slice',\n  'substring',\n  'substr',\n  'concat'\n];\n\nfor (var method in prototypeMethods) prototype2method(prototypeMethods[method]);\n\n\nmodule.exports = s;\n\n},{\"./camelize\":1,\"./capitalize\":2,\"./chars\":3,\"./chop\":4,\"./classify\":5,\"./clean\":6,\"./cleanDiacritics\":7,\"./count\":8,\"./dasherize\":9,\"./decapitalize\":10,\"./dedent\":11,\"./endsWith\":12,\"./escapeHTML\":13,\"./exports\":14,\"./helper/escapeRegExp\":18,\"./humanize\":23,\"./include\":24,\"./insert\":26,\"./isBlank\":27,\"./join\":28,\"./levenshtein\":29,\"./lines\":30,\"./lpad\":31,\"./lrpad\":32,\"./ltrim\":33,\"./map\":34,\"./naturalCmp\":35,\"./numberFormat\":38,\"./pad\":39,\"./pred\":40,\"./prune\":41,\"./quote\":42,\"./repeat\":43,\"./replaceAll\":44,\"./reverse\":45,\"./rpad\":46,\"./rtrim\":47,\"./slugify\":48,\"./splice\":49,\"./sprintf\":50,\"./startsWith\":51,\"./strLeft\":52,\"./strLeftBack\":53,\"./strRight\":54,\"./strRightBack\":55,\"./stripTags\":56,\"./succ\":57,\"./surround\":58,\"./swapCase\":59,\"./titleize\":60,\"./toBoolean\":61,\"./toNumber\":62,\"./toSentence\":63,\"./toSentenceSerial\":64,\"./trim\":65,\"./truncate\":66,\"./underscored\":67,\"./unescapeHTML\":68,\"./unquote\":69,\"./vsprintf\":70,\"./words\":71,\"./wrap\":72}],26:[function(require,module,exports){\nvar splice = require('./splice');\n\nmodule.exports = function insert(str, i, substr) {\n  return splice(str, i, 0, substr);\n};\n\n},{\"./splice\":49}],27:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function isBlank(str) {\n  return (/^\\s*$/).test(makeString(str));\n};\n\n},{\"./helper/makeString\":20}],28:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar slice = [].slice;\n\nmodule.exports = function join() {\n  var args = slice.call(arguments),\n    separator = args.shift();\n\n  return args.join(makeString(separator));\n};\n\n},{\"./helper/makeString\":20}],29:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\n/**\n * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein\n */\nmodule.exports = function levenshtein(str1, str2) {\n  'use strict';\n  str1 = makeString(str1);\n  str2 = makeString(str2);\n\n  // Short cut cases  \n  if (str1 === str2) return 0;\n  if (!str1 || !str2) return Math.max(str1.length, str2.length);\n\n  // two rows\n  var prevRow = new Array(str2.length + 1);\n\n  // initialise previous row\n  for (var i = 0; i < prevRow.length; ++i) {\n    prevRow[i] = i;\n  }\n\n  // calculate current row distance from previous row\n  for (i = 0; i < str1.length; ++i) {\n    var nextCol = i + 1;\n\n    for (var j = 0; j < str2.length; ++j) {\n      var curCol = nextCol;\n\n      // substution\n      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );\n      // insertion\n      var tmp = curCol + 1;\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      }\n      // deletion\n      tmp = prevRow[j + 1] + 1;\n      if (nextCol > tmp) {\n        nextCol = tmp;\n      }\n\n      // copy current col value into previous (in preparation for next iteration)\n      prevRow[j] = curCol;\n    }\n\n    // copy last col value into previous (in preparation for next iteration)\n    prevRow[j] = nextCol;\n  }\n\n  return nextCol;\n};\n\n},{\"./helper/makeString\":20}],30:[function(require,module,exports){\nmodule.exports = function lines(str) {\n  if (str == null) return [];\n  return String(str).split(/\\r\\n?|\\n/);\n};\n\n},{}],31:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function lpad(str, length, padStr) {\n  return pad(str, length, padStr);\n};\n\n},{\"./pad\":39}],32:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function lrpad(str, length, padStr) {\n  return pad(str, length, padStr, 'both');\n};\n\n},{\"./pad\":39}],33:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimLeft = String.prototype.trimLeft;\n\nmodule.exports = function ltrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],34:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function(str, callback) {\n  str = makeString(str);\n\n  if (str.length === 0 || typeof callback !== 'function') return str;\n\n  return str.replace(/./g, callback);\n};\n\n},{\"./helper/makeString\":20}],35:[function(require,module,exports){\nmodule.exports = function naturalCmp(str1, str2) {\n  if (str1 == str2) return 0;\n  if (!str1) return -1;\n  if (!str2) return 1;\n\n  var cmpRegex = /(\\.\\d+|\\d+|\\D+)/g,\n    tokens1 = String(str1).match(cmpRegex),\n    tokens2 = String(str2).match(cmpRegex),\n    count = Math.min(tokens1.length, tokens2.length);\n\n  for (var i = 0; i < count; i++) {\n    var a = tokens1[i],\n      b = tokens2[i];\n\n    if (a !== b) {\n      var num1 = +a;\n      var num2 = +b;\n      if (num1 === num1 && num2 === num2) {\n        return num1 > num2 ? 1 : -1;\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  if (tokens1.length != tokens2.length)\n    return tokens1.length - tokens2.length;\n\n  return str1 < str2 ? -1 : 1;\n};\n\n},{}],36:[function(require,module,exports){\n(function(window) {\n    var re = {\n        not_string: /[^s]/,\n        number: /[diefg]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function sprintf() {\n        var key = arguments[0], cache = sprintf.cache\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\n            cache[key] = sprintf.parse(key)\n        }\n        return sprintf.format.call(null, cache[key], arguments)\n    }\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i])\n            if (node_type === \"string\") {\n                output[output.length] = parse_tree[i]\n            }\n            else if (node_type === \"array\") {\n                match = parse_tree[i] // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))\n                        }\n                        arg = arg[match[2][k]]\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (get_type(arg) == \"function\") {\n                    arg = arg()\n                }\n\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\n                }\n\n                if (re.number.test(match[8])) {\n                    is_positive = arg >= 0\n                }\n\n                switch (match[8]) {\n                    case \"b\":\n                        arg = arg.toString(2)\n                    break\n                    case \"c\":\n                        arg = String.fromCharCode(arg)\n                    break\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10)\n                    break\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n                    break\n                    case \"e\":\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()\n                    break\n                    case \"f\":\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n                    break\n                    case \"g\":\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\n                    break\n                    case \"o\":\n                        arg = arg.toString(8)\n                    break\n                    case \"s\":\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)\n                    break\n                    case \"u\":\n                        arg = arg >>> 0\n                    break\n                    case \"x\":\n                        arg = arg.toString(16)\n                    break\n                    case \"X\":\n                        arg = arg.toString(16).toUpperCase()\n                    break\n                }\n                if (re.json.test(match[8])) {\n                    output[output.length] = arg\n                }\n                else {\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\n                        sign = is_positive ? \"+\" : \"-\"\n                        arg = arg.toString().replace(re.sign, \"\")\n                    }\n                    else {\n                        sign = \"\"\n                    }\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"\n                    pad_length = match[6] - (sign + arg).length\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output.join(\"\")\n    }\n\n    sprintf.cache = {}\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = match[0]\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = \"%\"\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list[field_list.length] = field_match[1]\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\n                }\n                parse_tree[parse_tree.length] = match\n            }\n            else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return parse_tree\n    }\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = (argv || []).slice(0)\n        _argv.splice(0, 0, fmt)\n        return sprintf.apply(null, _argv)\n    }\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\n    }\n\n    function str_repeat(input, multiplier) {\n        return Array(multiplier + 1).join(input)\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    if (typeof exports !== \"undefined\") {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    else {\n        window.sprintf = sprintf\n        window.vsprintf = vsprintf\n\n        if (typeof define === \"function\" && define.amd) {\n            define(function() {\n                return {\n                    sprintf: sprintf,\n                    vsprintf: vsprintf\n                }\n            })\n        }\n    }\n})(typeof window === \"undefined\" ? this : window);\n\n},{}],37:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],38:[function(require,module,exports){\nmodule.exports = function numberFormat(number, dec, dsep, tsep) {\n  if (isNaN(number) || number == null) return '';\n\n  number = number.toFixed(~~dec);\n  tsep = typeof tsep == 'string' ? tsep : ',';\n\n  var parts = number.split('.'),\n    fnums = parts[0],\n    decimals = parts[1] ? (dsep || '.') + parts[1] : '';\n\n  return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;\n};\n\n},{}],39:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar strRepeat = require('./helper/strRepeat');\n\nmodule.exports = function pad(str, length, padStr, type) {\n  str = makeString(str);\n  length = ~~length;\n\n  var padlen = 0;\n\n  if (!padStr)\n    padStr = ' ';\n  else if (padStr.length > 1)\n    padStr = padStr.charAt(0);\n\n  switch (type) {\n  case 'right':\n    padlen = length - str.length;\n    return str + strRepeat(padStr, padlen);\n  case 'both':\n    padlen = length - str.length;\n    return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));\n  default: // 'left'\n    padlen = length - str.length;\n    return strRepeat(padStr, padlen) + str;\n  }\n};\n\n},{\"./helper/makeString\":20,\"./helper/strRepeat\":21}],40:[function(require,module,exports){\nvar adjacent = require('./helper/adjacent');\n\nmodule.exports = function succ(str) {\n  return adjacent(str, -1);\n};\n\n},{\"./helper/adjacent\":15}],41:[function(require,module,exports){\n/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n  if (str.length <= length) return str;\n\n  var tmpl = function(c) {\n      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n    },\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n  if (template.slice(template.length - 2).match(/\\w\\w/))\n    template = template.replace(/\\s*\\S+$/, '');\n  else\n    template = rtrim(template.slice(0, template.length - 1));\n\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};\n\n},{\"./helper/makeString\":20,\"./rtrim\":47}],42:[function(require,module,exports){\nvar surround = require('./surround');\n\nmodule.exports = function quote(str, quoteChar) {\n  return surround(str, quoteChar || '\"');\n};\n\n},{\"./surround\":58}],43:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar strRepeat = require('./helper/strRepeat');\n\nmodule.exports = function repeat(str, qty, separator) {\n  str = makeString(str);\n\n  qty = ~~qty;\n\n  // using faster implementation if separator is not needed;\n  if (separator == null) return strRepeat(str, qty);\n\n  // this one is about 300x slower in Google Chrome\n  /*eslint no-empty: 0*/\n  for (var repeat = []; qty > 0; repeat[--qty] = str) {}\n  return repeat.join(separator);\n};\n\n},{\"./helper/makeString\":20,\"./helper/strRepeat\":21}],44:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function replaceAll(str, find, replace, ignorecase) {\n  var flags = (ignorecase === true)?'gi':'g';\n  var reg = new RegExp(find, flags);\n\n  return makeString(str).replace(reg, replace);\n};\n\n},{\"./helper/makeString\":20}],45:[function(require,module,exports){\nvar chars = require('./chars');\n\nmodule.exports = function reverse(str) {\n  return chars(str).reverse().join('');\n};\n\n},{\"./chars\":3}],46:[function(require,module,exports){\nvar pad = require('./pad');\n\nmodule.exports = function rpad(str, length, padStr) {\n  return pad(str, length, padStr, 'right');\n};\n\n},{\"./pad\":39}],47:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimRight = String.prototype.trimRight;\n\nmodule.exports = function rtrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp(characters + '+$'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],48:[function(require,module,exports){\nvar trim = require('./trim');\nvar dasherize = require('./dasherize');\nvar cleanDiacritics = require('./cleanDiacritics');\n\nmodule.exports = function slugify(str) {\n  return trim(dasherize(cleanDiacritics(str).replace(/[^\\w\\s-]/g, '-').toLowerCase()), '-');\n};\n\n},{\"./cleanDiacritics\":7,\"./dasherize\":9,\"./trim\":65}],49:[function(require,module,exports){\nvar chars = require('./chars');\n\nmodule.exports = function splice(str, i, howmany, substr) {\n  var arr = chars(str);\n  arr.splice(~~i, ~~howmany, substr);\n  return arr.join('');\n};\n\n},{\"./chars\":3}],50:[function(require,module,exports){\nvar deprecate = require('util-deprecate');\n\nmodule.exports = deprecate(require('sprintf-js').sprintf,\n  'sprintf() will be removed in the next major release, use the sprintf-js package instead.');\n\n},{\"sprintf-js\":36,\"util-deprecate\":37}],51:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar toPositive = require('./helper/toPositive');\n\nmodule.exports = function startsWith(str, starts, position) {\n  str = makeString(str);\n  starts = '' + starts;\n  position = position == null ? 0 : Math.min(toPositive(position), str.length);\n  return str.lastIndexOf(starts, position) === position;\n};\n\n},{\"./helper/makeString\":20,\"./helper/toPositive\":22}],52:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strLeft(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.indexOf(sep);\n  return~ pos ? str.slice(0, pos) : str;\n};\n\n},{\"./helper/makeString\":20}],53:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strLeftBack(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = str.lastIndexOf(sep);\n  return~ pos ? str.slice(0, pos) : str;\n};\n\n},{\"./helper/makeString\":20}],54:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strRight(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.indexOf(sep);\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;\n};\n\n},{\"./helper/makeString\":20}],55:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function strRightBack(str, sep) {\n  str = makeString(str);\n  sep = makeString(sep);\n  var pos = !sep ? -1 : str.lastIndexOf(sep);\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;\n};\n\n},{\"./helper/makeString\":20}],56:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function stripTags(str) {\n  return makeString(str).replace(/<\\/?[^>]+>/g, '');\n};\n\n},{\"./helper/makeString\":20}],57:[function(require,module,exports){\nvar adjacent = require('./helper/adjacent');\n\nmodule.exports = function succ(str) {\n  return adjacent(str, 1);\n};\n\n},{\"./helper/adjacent\":15}],58:[function(require,module,exports){\nmodule.exports = function surround(str, wrapper) {\n  return [wrapper, str, wrapper].join('');\n};\n\n},{}],59:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function swapCase(str) {\n  return makeString(str).replace(/\\S/g, function(c) {\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n},{\"./helper/makeString\":20}],60:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function titleize(str) {\n  return makeString(str).toLowerCase().replace(/(?:^|\\s|-)\\S/g, function(c) {\n    return c.toUpperCase();\n  });\n};\n\n},{\"./helper/makeString\":20}],61:[function(require,module,exports){\nvar trim = require('./trim');\n\nfunction boolMatch(s, matchers) {\n  var i, matcher, down = s.toLowerCase();\n  matchers = [].concat(matchers);\n  for (i = 0; i < matchers.length; i += 1) {\n    matcher = matchers[i];\n    if (!matcher) continue;\n    if (matcher.test && matcher.test(s)) return true;\n    if (matcher.toLowerCase() === down) return true;\n  }\n}\n\nmodule.exports = function toBoolean(str, trueValues, falseValues) {\n  if (typeof str === 'number') str = '' + str;\n  if (typeof str !== 'string') return !!str;\n  str = trim(str);\n  if (boolMatch(str, trueValues || ['true', '1'])) return true;\n  if (boolMatch(str, falseValues || ['false', '0'])) return false;\n};\n\n},{\"./trim\":65}],62:[function(require,module,exports){\nmodule.exports = function toNumber(num, precision) {\n  if (num == null) return 0;\n  var factor = Math.pow(10, isFinite(precision) ? precision : 0);\n  return Math.round(num * factor) / factor;\n};\n\n},{}],63:[function(require,module,exports){\nvar rtrim = require('./rtrim');\n\nmodule.exports = function toSentence(array, separator, lastSeparator, serial) {\n  separator = separator || ', ';\n  lastSeparator = lastSeparator || ' and ';\n  var a = array.slice(),\n    lastMember = a.pop();\n\n  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;\n\n  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;\n};\n\n},{\"./rtrim\":47}],64:[function(require,module,exports){\nvar toSentence = require('./toSentence');\n\nmodule.exports = function toSentenceSerial(array, sep, lastSep) {\n  return toSentence(array, sep, lastSep, true);\n};\n\n},{\"./toSentence\":63}],65:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrim = String.prototype.trim;\n\nmodule.exports = function trim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrim) return nativeTrim.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');\n};\n\n},{\"./helper/defaultToWhiteSpace\":16,\"./helper/makeString\":20}],66:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function truncate(str, length, truncateStr) {\n  str = makeString(str);\n  truncateStr = truncateStr || '...';\n  length = ~~length;\n  return str.length > length ? str.slice(0, length) + truncateStr : str;\n};\n\n},{\"./helper/makeString\":20}],67:[function(require,module,exports){\nvar trim = require('./trim');\n\nmodule.exports = function underscored(str) {\n  return trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n};\n\n},{\"./trim\":65}],68:[function(require,module,exports){\nvar makeString = require('./helper/makeString');\nvar htmlEntities = require('./helper/htmlEntities');\n\nmodule.exports = function unescapeHTML(str) {\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {\n    var match;\n\n    if (entityCode in htmlEntities) {\n      return htmlEntities[entityCode];\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n      return String.fromCharCode(parseInt(match[1], 16));\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {\n      return String.fromCharCode(~~match[1]);\n    } else {\n      return entity;\n    }\n  });\n};\n\n},{\"./helper/htmlEntities\":19,\"./helper/makeString\":20}],69:[function(require,module,exports){\nmodule.exports = function unquote(str, quoteChar) {\n  quoteChar = quoteChar || '\"';\n  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)\n    return str.slice(1, str.length - 1);\n  else return str;\n};\n\n},{}],70:[function(require,module,exports){\nvar deprecate = require('util-deprecate');\n\nmodule.exports = deprecate(require('sprintf-js').vsprintf,\n  'vsprintf() will be removed in the next major release, use the sprintf-js package instead.');\n\n},{\"sprintf-js\":36,\"util-deprecate\":37}],71:[function(require,module,exports){\nvar isBlank = require('./isBlank');\nvar trim = require('./trim');\n\nmodule.exports = function words(str, delimiter) {\n  if (isBlank(str)) return [];\n  return trim(str, delimiter).split(delimiter || /\\s+/);\n};\n\n},{\"./isBlank\":27,\"./trim\":65}],72:[function(require,module,exports){\n// Wrap\n// wraps a string by a certain width\n\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function wrap(str, options){\n  str = makeString(str);\n  \n  options = options || {};\n  \n  var width = options.width || 75;\n  var seperator = options.seperator || '\\n';\n  var cut = options.cut || false;\n  var preserveSpaces = options.preserveSpaces || false;\n  var trailingSpaces = options.trailingSpaces || false;\n  \n  var result;\n  \n  if(width <= 0){\n    return str;\n  }\n  \n  else if(!cut){\n  \n    var words = str.split(' ');\n    var current_column = 0;\n    result = '';\n  \n    while(words.length > 0){\n      \n      // if adding a space and the next word would cause this line to be longer than width...\n      if(1 + words[0].length + current_column > width){\n        //start a new line if this line is not already empty\n        if(current_column > 0){\n          // add a space at the end of the line is preserveSpaces is true\n          if (preserveSpaces){\n            result += ' ';\n            current_column++;\n          }\n          // fill the rest of the line with spaces if trailingSpaces option is true\n          else if(trailingSpaces){\n            while(current_column < width){\n              result += ' ';\n              current_column++;\n            }            \n          }\n          //start new line\n          result += seperator;\n          current_column = 0;\n        }\n      }\n  \n      // if not at the begining of the line, add a space in front of the word\n      if(current_column > 0){\n        result += ' ';\n        current_column++;\n      }\n  \n      // tack on the next word, update current column, a pop words array\n      result += words[0];\n      current_column += words[0].length;\n      words.shift();\n  \n    }\n  \n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if(trailingSpaces){\n      while(current_column < width){\n        result += ' ';\n        current_column++;\n      }            \n    }\n  \n    return result;\n  \n  }\n  \n  else {\n  \n    var index = 0;\n    result = '';\n  \n    // walk through each character and add seperators where appropriate\n    while(index < str.length){\n      if(index % width == 0 && index > 0){\n        result += seperator;\n      }\n      result += str.charAt(index);\n      index++;\n    }\n  \n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if(trailingSpaces){\n      while(index % width > 0){\n        result += ' ';\n        index++;\n      }            \n    }\n    \n    return result;\n  }\n};\n\n},{\"./helper/makeString\":20}]},{},[25])(25)\n});","// s will be picked up by Meteor and exported\ns = module.exports;\n"]}}]