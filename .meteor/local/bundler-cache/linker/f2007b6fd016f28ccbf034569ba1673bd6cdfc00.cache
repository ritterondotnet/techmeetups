[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Router = Package['iron:router'].Router;\nvar RouteController = Package['iron:router'].RouteController;\nvar _ = Package.underscore._;\nvar AccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nvar Iron = Package['iron:core'].Iron;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\nvar T9n = Package['softwarerero:accounts-t9n'].T9n;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_iron-routing/lib/core.js                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global                                                                                                      // 1\n  AccountsTemplates: false                                                                                     // 2\n*/                                                                                                             // 3\n'use strict';                                                                                                  // 4\n                                                                                                               // 5\n// ---------------------------------------------------------------------------------                           // 6\n                                                                                                               // 7\n// Patterns for methods\" parameters                                                                            // 8\n                                                                                                               // 9\n// ---------------------------------------------------------------------------------                           // 10\n                                                                                                               // 11\n// Route configuration pattern to be checked with check                                                        // 12\nvar ROUTE_PAT = {                                                                                              // 13\n  name: Match.Optional(String),                                                                                // 14\n  path: Match.Optional(String),                                                                                // 15\n  template: Match.Optional(String),                                                                            // 16\n  layoutTemplate: Match.Optional(String),                                                                      // 17\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),                                    // 18\n};                                                                                                             // 19\n                                                                                                               // 20\n/*                                                                                                             // 21\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the     // 22\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);             // 23\n    name:           String (optional). A unique route\"s name to be passed to iron-router                       // 24\n    path:           String (optional). A unique route\"s path to be passed to iron-router                       // 25\n    template:       String (optional). The name of the template to be rendered                                 // 26\n    layoutTemplate: String (optional). The name of the layout to be used                                       // 27\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/                                                                                                             // 29\n                                                                                                               // 30\n                                                                                                               // 31\n// Allowed routes along with theirs default configuration values                                               // 32\nAccountsTemplates.ROUTE_DEFAULT = {                                                                            // 33\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},                                       // 34\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},                                        // 35\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},                                                     // 36\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},                                       // 37\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},                                        // 38\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},                                               // 39\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},                                               // 40\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},                                          // 41\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"},                          // 42\n};                                                                                                             // 43\n                                                                                                               // 44\n                                                                                                               // 45\n// Current configuration values                                                                                // 46\n// Redirects                                                                                                   // 47\nAccountsTemplates.options.homeRoutePath = \"/\";                                                                 // 48\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds                                                 // 49\n                                                                                                               // 50\n// Known routes used to filter out previous path for redirects...                                              // 51\nAccountsTemplates.knownRoutes = [];                                                                            // 52\n                                                                                                               // 53\n// Configured routes                                                                                           // 54\nAccountsTemplates.routes = {};                                                                                 // 55\n                                                                                                               // 56\nAccountsTemplates.configureRoute = function(route, options) {                                                  // 57\n  check(route, String);                                                                                        // 58\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));                                    // 59\n  options = _.clone(options);                                                                                  // 60\n  // Route Configuration can be done only before initialization                                                // 61\n  if (this._initialized) {                                                                                     // 62\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");                    // 63\n  }                                                                                                            // 64\n  // Only allowed routes can be configured                                                                     // 65\n  if (!(route in this.ROUTE_DEFAULT)) {                                                                        // 66\n    throw new Error(\"Unknown Route!\");                                                                         // 67\n  }                                                                                                            // 68\n  // Allow route configuration only once                                                                       // 69\n  if (route in this.routes) {                                                                                  // 70\n    throw new Error(\"Route already configured!\");                                                              // 71\n  }                                                                                                            // 72\n                                                                                                               // 73\n  // Possibly adds a initial / to the provided path                                                            // 74\n  if (options && options.path && options.path[0] !== \"/\") {                                                    // 75\n    options.path = \"/\" + options.path;                                                                         // 76\n  }                                                                                                            // 77\n  // Updates the current configuration                                                                         // 78\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);                                              // 79\n                                                                                                               // 80\n  this.routes[route] = options;                                                                                // 81\n  // Known routes are used to filter out previous path for redirects...                                        // 82\n  AccountsTemplates.knownRoutes.push(options.path);                                                            // 83\n                                                                                                               // 84\n  if (Meteor.isServer){                                                                                        // 85\n    // Configures \"reset password\" email link                                                                  // 86\n    if (route === \"resetPwd\"){                                                                                 // 87\n      var resetPwdPath = options.path.substr(1);                                                               // 88\n      Accounts.urls.resetPassword = function(token){                                                           // 89\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);                                                 // 90\n      };                                                                                                       // 91\n    }                                                                                                          // 92\n    // Configures \"enroll account\" email link                                                                  // 93\n    if (route === \"enrollAccount\"){                                                                            // 94\n      var enrollAccountPath = options.path.substr(1);                                                          // 95\n      Accounts.urls.enrollAccount = function(token){                                                           // 96\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);                                            // 97\n      };                                                                                                       // 98\n    }                                                                                                          // 99\n    // Configures \"verify email\" email link                                                                    // 100\n    if (route === \"verifyEmail\"){                                                                              // 101\n      var verifyEmailPath = options.path.substr(1);                                                            // 102\n      Accounts.urls.verifyEmail = function(token){                                                             // 103\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);                                              // 104\n      };                                                                                                       // 105\n    }                                                                                                          // 106\n  }                                                                                                            // 107\n                                                                                                               // 108\n  if (route === \"ensureSignedIn\") {                                                                            // 109\n    return;                                                                                                    // 110\n  }                                                                                                            // 111\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {                              // 112\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");                      // 113\n  }                                                                                                            // 114\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {                            // 115\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");                    // 116\n  }                                                                                                            // 117\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {                           // 118\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");                   // 119\n  }                                                                                                            // 120\n                                                                                                               // 121\n  // Determines the default layout to be used in case no specific one is specified for single routes           // 122\n  var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;                // 123\n                                                                                                               // 124\n  var name = options.name; // Default provided...                                                              // 125\n  var path = options.path; // Default provided...                                                              // 126\n  var template = options.template || \"fullPageAtForm\";                                                         // 127\n  var layoutTemplate = options.layoutTemplate || defaultLayout;                                                // 128\n  var additionalOptions = _.omit(options, [                                                                    // 129\n    \"layoutTemplate\", \"name\", \"path\", \"redirect\", \"template\"                                                   // 130\n  ]);                                                                                                          // 131\n                                                                                                               // 132\n  // Possibly adds token parameter                                                                             // 133\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){                                        // 134\n    path += \"/:paramToken\";                                                                                    // 135\n    if (route === \"verifyEmail\") {                                                                             // 136\n      Router.route(path, _.extend(additionalOptions, {                                                         // 137\n        name: name,                                                                                            // 138\n        template: template,                                                                                    // 139\n        layoutTemplate: layoutTemplate,                                                                        // 140\n        onRun: function() {                                                                                    // 141\n          AccountsTemplates.setState(route);                                                                   // 142\n          AccountsTemplates.setDisabled(true);                                                                 // 143\n          var token = this.params.paramToken;                                                                  // 144\n          Accounts.verifyEmail(token, function(error){                                                         // 145\n            AccountsTemplates.setDisabled(false);                                                              // 146\n            AccountsTemplates.submitCallback(error, route, function(){                                         // 147\n              AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);          // 148\n            });                                                                                                // 149\n          });                                                                                                  // 150\n                                                                                                               // 151\n          this.next();                                                                                         // 152\n        },                                                                                                     // 153\n        onStop: function() {                                                                                   // 154\n          AccountsTemplates.clearState();                                                                      // 155\n        },                                                                                                     // 156\n      }));                                                                                                     // 157\n    }                                                                                                          // 158\n    else {                                                                                                     // 159\n      Router.route(path, _.extend(additionalOptions, {                                                         // 160\n        name: name,                                                                                            // 161\n        template: template,                                                                                    // 162\n        layoutTemplate: layoutTemplate,                                                                        // 163\n        onBeforeAction: function() {                                                                           // 164\n          AccountsTemplates.paramToken = this.params.paramToken;                                               // 165\n          AccountsTemplates.setState(route);                                                                   // 166\n          this.next();                                                                                         // 167\n        },                                                                                                     // 168\n        onStop: function() {                                                                                   // 169\n          AccountsTemplates.clearState();                                                                      // 170\n          AccountsTemplates.paramToken = null;                                                                 // 171\n        }                                                                                                      // 172\n      }));                                                                                                     // 173\n    }                                                                                                          // 174\n  }                                                                                                            // 175\n  else {                                                                                                       // 176\n    Router.route(path, _.extend(additionalOptions, {                                                           // 177\n      name: name,                                                                                              // 178\n      template: template,                                                                                      // 179\n      layoutTemplate: layoutTemplate,                                                                          // 180\n      onBeforeAction: function() {                                                                             // 181\n        var redirect = false;                                                                                  // 182\n        if (route === 'changePwd') {                                                                           // 183\n          if (!Meteor.loggingIn() && !Meteor.userId()) {                                                       // 184\n            redirect = true;                                                                                   // 185\n          }                                                                                                    // 186\n        }                                                                                                      // 187\n        else if (Meteor.userId()) {                                                                            // 188\n          redirect = true;                                                                                     // 189\n        }                                                                                                      // 190\n        if (redirect) {                                                                                        // 191\n          AccountsTemplates.postSubmitRedirect(route);                                                         // 192\n          this.stop();                                                                                         // 193\n        }                                                                                                      // 194\n        else {                                                                                                 // 195\n          AccountsTemplates.setState(route);                                                                   // 196\n          this.next();                                                                                         // 197\n        }                                                                                                      // 198\n      },                                                                                                       // 199\n      onStop: function() {                                                                                     // 200\n        AccountsTemplates.clearState();                                                                        // 201\n      }                                                                                                        // 202\n    }));                                                                                                       // 203\n  }                                                                                                            // 204\n};                                                                                                             // 205\n                                                                                                               // 206\n                                                                                                               // 207\nAccountsTemplates.getRouteName = function(route) {                                                             // 208\n  if (route in this.routes) {                                                                                  // 209\n    return this.routes[route].name;                                                                            // 210\n  }                                                                                                            // 211\n  return null;                                                                                                 // 212\n};                                                                                                             // 213\n                                                                                                               // 214\nAccountsTemplates.getRoutePath = function(route) {                                                             // 215\n  if (route in this.routes) {                                                                                  // 216\n    return this.routes[route].path;                                                                            // 217\n  }                                                                                                            // 218\n  return \"#\";                                                                                                  // 219\n};                                                                                                             // 220\n                                                                                                               // 221\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_iron-routing/lib/server.js                                                            //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global                                                                                                      // 1\n  Iron: false                                                                                                  // 2\n*/                                                                                                             // 3\n'use strict';                                                                                                  // 4\n                                                                                                               // 5\n                                                                                                               // 6\n// Fake server-side IR plugin to allow for shared routing files                                                // 7\nIron.Router.plugins.ensureSignedIn = function (router, options) {};                                            // 8\n                                                                                                               // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['useraccounts:iron-routing'] = {};\n\n})();\n","servePath":"/packages/useraccounts_iron-routing.js","sourceMap":{"version":3,"sources":["/packages/useraccounts_iron-routing/lib/core.js","/packages/useraccounts_iron-routing/lib/server.js"],"names":[],"mappingsqH;;;;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH","file":"/packages/useraccounts_iron-routing.js","sourcesContent":["/* global\n  AccountsTemplates: false\n*/\n'use strict';\n\n// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n  name: Match.Optional(String),\n  path: Match.Optional(String),\n  template: Match.Optional(String),\n  layoutTemplate: Match.Optional(String),\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n/*\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n    name:           String (optional). A unique route\"s name to be passed to iron-router\n    path:           String (optional). A unique route\"s path to be passed to iron-router\n    template:       String (optional). The name of the template to be rendered\n    layoutTemplate: String (optional). The name of the layout to be used\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAccountsTemplates.ROUTE_DEFAULT = {\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"},\n};\n\n\n// Current configuration values\n// Redirects\nAccountsTemplates.options.homeRoutePath = \"/\";\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds\n\n// Known routes used to filter out previous path for redirects...\nAccountsTemplates.knownRoutes = [];\n\n// Configured routes\nAccountsTemplates.routes = {};\n\nAccountsTemplates.configureRoute = function(route, options) {\n  check(route, String);\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));\n  options = _.clone(options);\n  // Route Configuration can be done only before initialization\n  if (this._initialized) {\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n  }\n  // Only allowed routes can be configured\n  if (!(route in this.ROUTE_DEFAULT)) {\n    throw new Error(\"Unknown Route!\");\n  }\n  // Allow route configuration only once\n  if (route in this.routes) {\n    throw new Error(\"Route already configured!\");\n  }\n\n  // Possibly adds a initial / to the provided path\n  if (options && options.path && options.path[0] !== \"/\") {\n    options.path = \"/\" + options.path;\n  }\n  // Updates the current configuration\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n\n  this.routes[route] = options;\n  // Known routes are used to filter out previous path for redirects...\n  AccountsTemplates.knownRoutes.push(options.path);\n\n  if (Meteor.isServer){\n    // Configures \"reset password\" email link\n    if (route === \"resetPwd\"){\n      var resetPwdPath = options.path.substr(1);\n      Accounts.urls.resetPassword = function(token){\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n      };\n    }\n    // Configures \"enroll account\" email link\n    if (route === \"enrollAccount\"){\n      var enrollAccountPath = options.path.substr(1);\n      Accounts.urls.enrollAccount = function(token){\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n      };\n    }\n    // Configures \"verify email\" email link\n    if (route === \"verifyEmail\"){\n      var verifyEmailPath = options.path.substr(1);\n      Accounts.urls.verifyEmail = function(token){\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n      };\n    }\n  }\n\n  if (route === \"ensureSignedIn\") {\n    return;\n  }\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n  }\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n  }\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n  }\n\n  // Determines the default layout to be used in case no specific one is specified for single routes\n  var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n\n  var name = options.name; // Default provided...\n  var path = options.path; // Default provided...\n  var template = options.template || \"fullPageAtForm\";\n  var layoutTemplate = options.layoutTemplate || defaultLayout;\n  var additionalOptions = _.omit(options, [\n    \"layoutTemplate\", \"name\", \"path\", \"redirect\", \"template\"\n  ]);\n\n  // Possibly adds token parameter\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n    path += \"/:paramToken\";\n    if (route === \"verifyEmail\") {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onRun: function() {\n          AccountsTemplates.setState(route);\n          AccountsTemplates.setDisabled(true);\n          var token = this.params.paramToken;\n          Accounts.verifyEmail(token, function(error){\n            AccountsTemplates.setDisabled(false);\n            AccountsTemplates.submitCallback(error, route, function(){\n              AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n            });\n          });\n\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n        },\n      }));\n    }\n    else {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onBeforeAction: function() {\n          AccountsTemplates.paramToken = this.params.paramToken;\n          AccountsTemplates.setState(route);\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n          AccountsTemplates.paramToken = null;\n        }\n      }));\n    }\n  }\n  else {\n    Router.route(path, _.extend(additionalOptions, {\n      name: name,\n      template: template,\n      layoutTemplate: layoutTemplate,\n      onBeforeAction: function() {\n        var redirect = false;\n        if (route === 'changePwd') {\n          if (!Meteor.loggingIn() && !Meteor.userId()) {\n            redirect = true;\n          }\n        }\n        else if (Meteor.userId()) {\n          redirect = true;\n        }\n        if (redirect) {\n          AccountsTemplates.postSubmitRedirect(route);\n          this.stop();\n        }\n        else {\n          AccountsTemplates.setState(route);\n          this.next();\n        }\n      },\n      onStop: function() {\n        AccountsTemplates.clearState();\n      }\n    }));\n  }\n};\n\n\nAccountsTemplates.getRouteName = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].name;\n  }\n  return null;\n};\n\nAccountsTemplates.getRoutePath = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].path;\n  }\n  return \"#\";\n};\n","/* global\n  Iron: false\n*/\n'use strict';\n\n\n// Fake server-side IR plugin to allow for shared routing files\nIron.Router.plugins.ensureSignedIn = function (router, options) {};\n"]}}]