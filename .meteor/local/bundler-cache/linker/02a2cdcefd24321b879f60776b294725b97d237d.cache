[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar Random = Package.random.Random;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Factory;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/dburles_factory/factory.js                                                      //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n/* global LocalCollection */                                                                //\n/* global Factory:true */                                                                   //\n                                                                                            //\nvar factories = {};                                                                         // 4\n                                                                                            //\nFactory = (function () {                                                                    // 6\n  function Factory(name, collection, attributes) {                                          // 7\n    babelHelpers.classCallCheck(this, Factory);                                             //\n                                                                                            //\n    this.name = name;                                                                       // 8\n    this.collection = collection;                                                           // 9\n    this.attributes = attributes;                                                           // 10\n    this.afterHooks = [];                                                                   // 11\n    this.sequence = 0;                                                                      // 12\n  }                                                                                         //\n                                                                                            //\n  Factory.prototype.after = (function () {                                                  // 6\n    function after(fn) {                                                                    // 15\n      this.afterHooks.push(fn);                                                             // 16\n      return this;                                                                          // 17\n    }                                                                                       //\n                                                                                            //\n    return after;                                                                           //\n  })();                                                                                     //\n                                                                                            //\n  return Factory;                                                                           //\n})();                                                                                       //\n                                                                                            //\nFactory.define = function (name, collection, attributes) {                                  // 21\n  factories[name] = new Factory(name, collection, attributes);                              // 22\n  return factories[name];                                                                   // 23\n};                                                                                          //\n                                                                                            //\nFactory.get = function (name) {                                                             // 26\n  var factory = factories[name];                                                            // 27\n  if (!factory) {                                                                           // 28\n    throw new Error(\"Factory: There is no factory named \" + name);                          // 29\n  }                                                                                         //\n  return factory;                                                                           // 31\n};                                                                                          //\n                                                                                            //\nFactory.build = function (name) {                                                           // 34\n  var attributes = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];    //\n                                                                                            //\n  var factory = Factory.get(name);                                                          // 35\n  var result = {};                                                                          // 36\n                                                                                            //\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved            //\n  var extendedAttributes = _.extend({}, factory.attributes, attributes);                    // 39\n                                                                                            //\n  // either create a new factory and return its _id                                         //\n  // or return a 'fake' _id (since we're not inserting anything)                            //\n  var makeRelation = function (relName) {                                                   // 43\n    if (options.insert) {                                                                   // 44\n      return Factory.create(relName)._id;                                                   // 45\n    }                                                                                       //\n    if (options.tree) {                                                                     // 47\n      return Factory.build(relName, {}, { tree: true });                                    // 48\n    }                                                                                       //\n    // fake an id on build                                                                  //\n    return Random.id();                                                                     // 51\n  };                                                                                        //\n                                                                                            //\n  var getValue = function (value) {                                                         // 54\n    return value instanceof Factory ? makeRelation(value.name) : value;                     // 55\n  };                                                                                        //\n                                                                                            //\n  var getValueFromFunction = function (func) {                                              // 58\n    var api = {                                                                             // 59\n      sequence: function (fn) {                                                             // 60\n        return fn(factory.sequence);                                                        //\n      }                                                                                     //\n    };                                                                                      //\n    var fnRes = func.call(result, api);                                                     // 62\n    return getValue(fnRes);                                                                 // 63\n  };                                                                                        //\n                                                                                            //\n  factory.sequence += 1;                                                                    // 66\n                                                                                            //\n  var walk = function (record, object) {                                                    // 68\n    _.each(object, function (value, key) {                                                  // 69\n      var newValue = value;                                                                 // 70\n      // is this a Factory instance?                                                        //\n      if (value instanceof Factory) {                                                       // 72\n        newValue = makeRelation(value.name);                                                // 73\n      } else if (_.isArray(value)) {                                                        //\n        newValue = value.map(function (element) {                                           // 75\n          if (_.isFunction(element)) {                                                      // 76\n            return getValueFromFunction(element);                                           // 77\n          }                                                                                 //\n          return getValue(element);                                                         // 79\n        });                                                                                 //\n      } else if (_.isFunction(value)) {                                                     //\n        newValue = getValueFromFunction(value);                                             // 82\n        // if an object literal is passed in, traverse deeper into it                       //\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {             //\n          record[key] = record[key] || {};                                                  // 85\n          return walk(record[key], value);                                                  // 86\n        }                                                                                   //\n                                                                                            //\n      var modifier = { $set: {} };                                                          // 89\n                                                                                            //\n      if (key !== '_id') {                                                                  // 91\n        modifier.$set[key] = newValue;                                                      // 92\n      }                                                                                     //\n                                                                                            //\n      LocalCollection._modify(record, modifier);                                            // 95\n    });                                                                                     //\n  };                                                                                        //\n                                                                                            //\n  walk(result, extendedAttributes);                                                         // 99\n                                                                                            //\n  if (!options.tree) {                                                                      // 101\n    result._id = extendedAttributes._id || Random.id();                                     // 102\n  }                                                                                         //\n  return result;                                                                            // 104\n};                                                                                          //\n                                                                                            //\nFactory.tree = function (name, attributes) {                                                // 107\n  return Factory.build(name, attributes, { tree: true });                                   // 108\n};                                                                                          //\n                                                                                            //\nFactory._create = function (name, doc) {                                                    // 111\n  var collection = Factory.get(name).collection;                                            // 112\n  var insertId = collection.insert(doc);                                                    // 113\n  var record = collection.findOne(insertId);                                                // 114\n  return record;                                                                            // 115\n};                                                                                          //\n                                                                                            //\nFactory.create = function (name) {                                                          // 118\n  var attributes = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n                                                                                            //\n  var doc = Factory.build(name, attributes, { insert: true });                              // 119\n  var record = Factory._create(name, doc);                                                  // 120\n                                                                                            //\n  Factory.get(name).afterHooks.forEach(function (cb) {                                      // 122\n    return cb(record);                                                                      //\n  });                                                                                       //\n                                                                                            //\n  return record;                                                                            // 124\n};                                                                                          //\n                                                                                            //\nFactory.extend = function (name) {                                                          // 127\n  var attributes = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n                                                                                            //\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);                       // 128\n};                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['dburles:factory'] = {\n  Factory: Factory\n};\n\n})();\n","servePath":"/packages/dburles_factory.js","sourceMap":{"version":3,"sources":["/factory.js"],"names":[],"mappings":"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","file":"/packages/dburles_factory.js","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory.build = (name, attributes = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName)._id;\n    }\n    if (options.tree) {\n      return Factory.build(relName, {}, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = {\n      sequence: fn => fn(factory.sequence)\n    };\n    const fnRes = func.call(result, api);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.tree = (name, attributes) => {\n  return Factory.build(name, attributes, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}) => {\n  const doc = Factory.build(name, attributes, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]}}]