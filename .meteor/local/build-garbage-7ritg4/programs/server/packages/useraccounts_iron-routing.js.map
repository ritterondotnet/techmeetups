{"version":3,"sources":["useraccounts:iron-routing/lib/core.js","useraccounts:iron-routing/lib/server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,S;AACA,0B;AACA,E;AACA,a;;AAEA,oF;;AAEA,mC;;AAEA,oF;;AAEA,uD;AACA,iB;AACA,+B;AACA,+B;AACA,mC;AACA,yC;AACA,2E;AACA,E;;AAEA,E;AACA,0G;AACA,kG;AACA,wF;AACA,wF;AACA,8E;AACA,wE;AACA,8G;AACA,E;;;AAGA,gE;AACA,mC;AACA,wE;AACA,uE;AACA,0D;AACA,wE;AACA,uE;AACA,gE;AACA,gE;AACA,qE;AACA,qF;AACA,E;;;AAGA,+B;AACA,Y;AACA,8C;AACA,8D;;AAEA,iE;AACA,mC;;AAEA,oB;AACA,8B;;AAEA,6D;AACA,uB;AACA,2E;AACA,6B;AACA,+D;AACA,0B;AACA,2F;AACA,G;AACA,0C;AACA,uC;AACA,sC;AACA,G;AACA,wC;AACA,6B;AACA,iD;AACA,G;;AAEA,mD;AACA,2D;AACA,sC;AACA,G;AACA,sC;AACA,iE;;AAEA,+B;AACA,uE;AACA,mD;;AAEA,uB;AACA,6C;AACA,8B;AACA,gD;AACA,oD;AACA,8D;AACA,Q;AACA,K;AACA,6C;AACA,mC;AACA,qD;AACA,oD;AACA,mE;AACA,Q;AACA,K;AACA,2C;AACA,iC;AACA,mD;AACA,kD;AACA,iE;AACA,Q;AACA,K;AACA,G;;AAEA,mC;AACA,W;AACA,G;AACA,iF;AACA,yF;AACA,G;AACA,mF;AACA,2F;AACA,G;AACA,oF;AACA,4F;AACA,G;;AAEA,oG;AACA,+F;;AAEA,iD;AACA,iD;AACA,sD;AACA,+D;AACA,2C;AACA,4D;AACA,K;;AAEA,kC;AACA,uE;AACA,2B;AACA,kC;AACA,sD;AACA,mB;AACA,2B;AACA,uC;AACA,2B;AACA,4C;AACA,8C;AACA,6C;AACA,sD;AACA,iD;AACA,sE;AACA,qG;AACA,e;AACA,a;;AAEA,sB;AACA,U;AACA,4B;AACA,yC;AACA,U;AACA,U;AACA,K;AACA,U;AACA,sD;AACA,mB;AACA,2B;AACA,uC;AACA,oC;AACA,gE;AACA,4C;AACA,sB;AACA,U;AACA,4B;AACA,yC;AACA,8C;AACA,S;AACA,U;AACA,K;AACA,G;AACA,Q;AACA,oD;AACA,iB;AACA,yB;AACA,qC;AACA,kC;AACA,6B;AACA,oC;AACA,wD;AACA,4B;AACA,W;AACA,S;AACA,mC;AACA,0B;AACA,S;AACA,uB;AACA,sD;AACA,sB;AACA,S;AACA,c;AACA,4C;AACA,sB;AACA,S;AACA,Q;AACA,0B;AACA,uC;AACA,O;AACA,Q;AACA,G;AACA,E;;;AAGA,kD;AACA,6B;AACA,mC;AACA,G;AACA,c;AACA,E;;AAEA,kD;AACA,6B;AACA,mC;AACA,G;AACA,a;AACA,E;;;;;;;;;;;;;;;;;;;AC3NA,S;AACA,a;AACA,E;AACA,a;;;AAGA,+D;AACA,mE","file":"/packages/useraccounts_iron-routing.js","sourcesContent":["/* global\n  AccountsTemplates: false\n*/\n'use strict';\n\n// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n  name: Match.Optional(String),\n  path: Match.Optional(String),\n  template: Match.Optional(String),\n  layoutTemplate: Match.Optional(String),\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n/*\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n    name:           String (optional). A unique route\"s name to be passed to iron-router\n    path:           String (optional). A unique route\"s path to be passed to iron-router\n    template:       String (optional). The name of the template to be rendered\n    layoutTemplate: String (optional). The name of the layout to be used\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAccountsTemplates.ROUTE_DEFAULT = {\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"},\n};\n\n\n// Current configuration values\n// Redirects\nAccountsTemplates.options.homeRoutePath = \"/\";\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds\n\n// Known routes used to filter out previous path for redirects...\nAccountsTemplates.knownRoutes = [];\n\n// Configured routes\nAccountsTemplates.routes = {};\n\nAccountsTemplates.configureRoute = function(route, options) {\n  check(route, String);\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));\n  options = _.clone(options);\n  // Route Configuration can be done only before initialization\n  if (this._initialized) {\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n  }\n  // Only allowed routes can be configured\n  if (!(route in this.ROUTE_DEFAULT)) {\n    throw new Error(\"Unknown Route!\");\n  }\n  // Allow route configuration only once\n  if (route in this.routes) {\n    throw new Error(\"Route already configured!\");\n  }\n\n  // Possibly adds a initial / to the provided path\n  if (options && options.path && options.path[0] !== \"/\") {\n    options.path = \"/\" + options.path;\n  }\n  // Updates the current configuration\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n\n  this.routes[route] = options;\n  // Known routes are used to filter out previous path for redirects...\n  AccountsTemplates.knownRoutes.push(options.path);\n\n  if (Meteor.isServer){\n    // Configures \"reset password\" email link\n    if (route === \"resetPwd\"){\n      var resetPwdPath = options.path.substr(1);\n      Accounts.urls.resetPassword = function(token){\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n      };\n    }\n    // Configures \"enroll account\" email link\n    if (route === \"enrollAccount\"){\n      var enrollAccountPath = options.path.substr(1);\n      Accounts.urls.enrollAccount = function(token){\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n      };\n    }\n    // Configures \"verify email\" email link\n    if (route === \"verifyEmail\"){\n      var verifyEmailPath = options.path.substr(1);\n      Accounts.urls.verifyEmail = function(token){\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n      };\n    }\n  }\n\n  if (route === \"ensureSignedIn\") {\n    return;\n  }\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n  }\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n  }\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n  }\n\n  // Determines the default layout to be used in case no specific one is specified for single routes\n  var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n\n  var name = options.name; // Default provided...\n  var path = options.path; // Default provided...\n  var template = options.template || \"fullPageAtForm\";\n  var layoutTemplate = options.layoutTemplate || defaultLayout;\n  var additionalOptions = _.omit(options, [\n    \"layoutTemplate\", \"name\", \"path\", \"redirect\", \"template\"\n  ]);\n\n  // Possibly adds token parameter\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n    path += \"/:paramToken\";\n    if (route === \"verifyEmail\") {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onRun: function() {\n          AccountsTemplates.setState(route);\n          AccountsTemplates.setDisabled(true);\n          var token = this.params.paramToken;\n          Accounts.verifyEmail(token, function(error){\n            AccountsTemplates.setDisabled(false);\n            AccountsTemplates.submitCallback(error, route, function(){\n              AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n            });\n          });\n\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n        },\n      }));\n    }\n    else {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onBeforeAction: function() {\n          AccountsTemplates.paramToken = this.params.paramToken;\n          AccountsTemplates.setState(route);\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n          AccountsTemplates.paramToken = null;\n        }\n      }));\n    }\n  }\n  else {\n    Router.route(path, _.extend(additionalOptions, {\n      name: name,\n      template: template,\n      layoutTemplate: layoutTemplate,\n      onBeforeAction: function() {\n        var redirect = false;\n        if (route === 'changePwd') {\n          if (!Meteor.loggingIn() && !Meteor.userId()) {\n            redirect = true;\n          }\n        }\n        else if (Meteor.userId()) {\n          redirect = true;\n        }\n        if (redirect) {\n          AccountsTemplates.postSubmitRedirect(route);\n          this.stop();\n        }\n        else {\n          AccountsTemplates.setState(route);\n          this.next();\n        }\n      },\n      onStop: function() {\n        AccountsTemplates.clearState();\n      }\n    }));\n  }\n};\n\n\nAccountsTemplates.getRouteName = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].name;\n  }\n  return null;\n};\n\nAccountsTemplates.getRoutePath = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].path;\n  }\n  return \"#\";\n};\n","/* global\n  Iron: false\n*/\n'use strict';\n\n\n// Fake server-side IR plugin to allow for shared routing files\nIron.Router.plugins.ensureSignedIn = function (router, options) {};\n"]}